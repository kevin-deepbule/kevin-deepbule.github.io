<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>01.深度学习入门课程笔记</title>
    <url>/2021/03/01/01-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="深度学习初体验"><a href="#深度学习初体验" class="headerlink" title="深度学习初体验"></a>深度学习初体验</h1><a id="more"></a>

<ul>
<li><a href="##K-%E8%BF%91%E9%82%BB">K-近邻</a></li>
<li><a href="##%E7%BA%BF%E6%80%A7%E5%88%86%E7%B1%BB%E5%99%A8">线性分类器</a></li>
<li><a href="##softmax%E5%88%86%E7%B1%BB%E5%99%A8">softmax分类器</a></li>
<li><a href="##%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD">反向传播</a></li>
</ul>
<h2 id="K-近邻"><a href="#K-近邻" class="headerlink" title="K-近邻"></a>K-近邻</h2><p>​        K-近邻是用来进行分类的一种算法，主要思路是,如果k=n,看离自己最近的n个点中那种类别最多，即为哪种类别。</p>
<h6 id="计算流程："><a href="#计算流程：" class="headerlink" title="计算流程："></a>计算流程：</h6><ol>
<li>计算已知类别数据集中的点与当前点的距离</li>
<li>按照距离依次排序</li>
<li>选取与当前点距离最小的k个点</li>
<li>确定前k个点所在类别出现的概率</li>
<li>返回前k个点中最高类别作为当前点预测分类</li>
</ol>
<h6 id="计算距离公式："><a href="#计算距离公式：" class="headerlink" title="计算距离公式："></a>计算距离公式：</h6><ul>
<li><p>L1 distance ：<br>$$</p>
<p>$$</p>
</li>
<li><p>L2 distance:</p>
</li>
</ul>
<p>$$</p>
<p>$$</p>
<h2 id="线性分类器"><a href="#线性分类器" class="headerlink" title="线性分类器"></a>线性分类器</h2><h2 id="softmax分类器"><a href="#softmax分类器" class="headerlink" title="softmax分类器"></a>softmax分类器</h2><h2 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h2>]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Huffman编码实践</title>
    <url>/2019/02/02/C-huffuman/</url>
    <content><![CDATA[<h2 id="Huffman编码解码C语言实现"><a href="#Huffman编码解码C语言实现" class="headerlink" title="Huffman编码解码C语言实现"></a>Huffman编码解码C语言实现</h2><a id="more"></a>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">哈夫曼编码</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVALUE 10000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLEAF 30</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXNODE MAXLEAF*2-1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXBIT 50</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	<span class="keyword">char</span> letter;</span><br><span class="line">	<span class="keyword">int</span> weight;</span><br><span class="line">	<span class="keyword">int</span> parent;</span><br><span class="line">	<span class="keyword">int</span> lchild;</span><br><span class="line">	<span class="keyword">int</span> rchild;</span><br><span class="line">&#125;HNodeType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="keyword">char</span> letter;</span><br><span class="line">	<span class="keyword">int</span> bit[MAXBIT];</span><br><span class="line">	<span class="keyword">int</span> start;</span><br><span class="line">&#125;HCodeType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="keyword">char</span> s;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">&#125;Message;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HuffmanTree</span><span class="params">(HNodeType HuffNode[],<span class="keyword">int</span> n,Message a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,m1,m2,x1,x2,temp1;<span class="keyword">char</span> temp2;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">2</span>*n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">		HuffNode[i].letter=<span class="literal">NULL</span>;</span><br><span class="line">		HuffNode[i].weight=<span class="number">0</span>;</span><br><span class="line">		HuffNode[i].parent=<span class="number">-1</span>;</span><br><span class="line">		HuffNode[i].lchild=<span class="number">-1</span>;</span><br><span class="line">		HuffNode[i].rchild=<span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	<span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n<span class="number">-1</span>;j++)</span><br><span class="line">		<span class="keyword">if</span>(a[j].num&gt;a[i].num)</span><br><span class="line">	&#123;</span><br><span class="line">        temp1=a[i].num;a[i].num=a[j].num;a[j].num=temp1;</span><br><span class="line">		temp2=a[i].s;a[i].s=a[j].s;a[j].s=temp2;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">       HuffNode[i].weight=a[i].num;</span><br><span class="line">	   HuffNode[i].letter=a[i].s;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		m1=m2=MAXVALUE;</span><br><span class="line">		x1=x2=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n+<span class="number">1</span>;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(HuffNode[j].parent==<span class="number">-1</span>&amp;&amp;HuffNode[j].weight&lt;m1)</span><br><span class="line">			&#123;</span><br><span class="line">				m2=m1;x2=x1;</span><br><span class="line">				m1=HuffNode[j].weight;</span><br><span class="line">				x1=j;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(HuffNode[j].parent==<span class="number">-1</span>&amp;&amp;HuffNode[j].weight&lt;m2)</span><br><span class="line">			&#123;</span><br><span class="line">				m2=HuffNode[j].weight;</span><br><span class="line">			    x2=j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		HuffNode[x1].parent=n+i;HuffNode[x2].parent=n+i;</span><br><span class="line">        HuffNode[n=i].weight=HuffNode[x1].weight+HuffNode[x2].weight;</span><br><span class="line">		HuffNode[n=i].lchild=x1;HuffNode[n+i].rchild=x2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HuffmanCode</span><span class="params">(<span class="keyword">int</span> n,Message a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	HNodeType HuffNode[MAXNODE];</span><br><span class="line">	HCodeType HuffCode[MAXLEAF],cd;</span><br><span class="line">	<span class="keyword">int</span> i,j,c,p;</span><br><span class="line">	<span class="keyword">char</span> code[<span class="number">30</span>],*m;</span><br><span class="line">	HuffmanTree(HuffNode,n,a);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cd.start=n<span class="number">-1</span>;</span><br><span class="line">		c=i;</span><br><span class="line">		p=HuffNode[c].parent;</span><br><span class="line">	<span class="keyword">while</span>(p!=<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(HuffNode[p].lchild==c)</span><br><span class="line">			cd.bit[cd.start]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			cd.bit[cd.start]=<span class="number">1</span>;</span><br><span class="line">		cd.start--;</span><br><span class="line">		c=p;</span><br><span class="line">		p=HuffNode[c].parent;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(j=cd.start+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">		HuffCode[i].bit[j]=cd.bit[j];</span><br><span class="line">	HuffCode[i].start=cd.start;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输出每个叶子的哈夫曼编码:\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">       HuffCode[i].letter=HuffNode[i].letter;</span><br><span class="line">	   <span class="built_in">printf</span>(<span class="string">&quot;%c:&quot;</span>,HuffCode[i].letter);</span><br><span class="line">	   <span class="keyword">for</span>(j=HuffCode[i].start+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">		   <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,HuffCode[i].bit[j]);</span><br><span class="line">	   <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入电文(1\0):\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++) code[i]=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;code); m=code;</span><br><span class="line">	c=<span class="number">2</span>*n<span class="number">-2</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输出哈夫曼译码:\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span>(*m!=<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(*m==<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			c=i=HuffNode[c].lchild;</span><br><span class="line">			<span class="keyword">if</span>(HuffNode[c].lchild==<span class="number">-1</span>&amp;&amp;HuffNode[c].rchild==<span class="number">-1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,HuffNode[i].letter);</span><br><span class="line">				c=<span class="number">2</span>*n<span class="number">-2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		m++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Message data[<span class="number">30</span>];</span><br><span class="line">	<span class="keyword">char</span> s[<span class="number">100</span>],*p;</span><br><span class="line">	<span class="keyword">int</span> i,count=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n 输入一些字符:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;s);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		data[i].s=<span class="literal">NULL</span>;</span><br><span class="line">		data[i].num=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	p=s;</span><br><span class="line">	<span class="keyword">while</span> (*p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=count+<span class="number">1</span>;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(data[i].s==<span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				data[i].s=*p;data[i].num++;count++;<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(data[i].s==*p)</span><br><span class="line">			&#123;</span><br><span class="line">				data[i].num++;<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		p++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;不同的字符数:%d\n&quot;</span>,count);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;count;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,data[i].s);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;权值:%d&quot;</span>,data[i].num);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	HuffmanCode(count,data);</span><br><span class="line">	getch();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>c语言</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6语法</title>
    <url>/2021/03/01/ES6%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="ES6语法"><a href="#ES6语法" class="headerlink" title="ES6语法"></a>ES6语法</h1><a id="more"></a>

<ul>
<li>能够说出使用let关键字声明变量的特点</li>
<li>能够使用解构赋值从数组中提取值</li>
<li>能够说出箭头函数拥有的特性</li>
<li>能够使用剩余参数接收剩余的函数参数</li>
<li>能够使用拓展运算符拆分数组</li>
<li>能够说出模板字符串拥有的特性</li>
</ul>
<h2 id="ES6相关概念（★★）"><a href="#ES6相关概念（★★）" class="headerlink" title="ES6相关概念（★★）"></a>ES6相关概念（★★）</h2><h3 id="什么是ES6"><a href="#什么是ES6" class="headerlink" title="什么是ES6"></a>什么是ES6</h3><p>ES 的全称是 ECMAScript , 它是由 ECMA 国际标准化组织,制定的一项脚本语言的标准化规范。</p>
<p>![](C:\Users\kevin\Desktop\前端\07-10 JavaScript网页编程\04-JavaScript高级资料\JavaScript 高级_day05\4-笔记\images\es-version.png)</p>
<h3 id="为什么使用-ES6"><a href="#为什么使用-ES6" class="headerlink" title="为什么使用 ES6 ?"></a>为什么使用 ES6 ?</h3><p>每一次标准的诞生都意味着语言的完善，功能的加强。JavaScript语言本身也有一些令人不满意的地方。</p>
<ul>
<li>变量提升特性增加了程序运行时的不可预测性</li>
<li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码</li>
</ul>
<h2 id="ES6新增语法"><a href="#ES6新增语法" class="headerlink" title="ES6新增语法"></a>ES6新增语法</h2><h3 id="let（★★★）"><a href="#let（★★★）" class="headerlink" title="let（★★★）"></a>let（★★★）</h3><p>ES6中新增了用于声明变量的关键字</p>
<h4 id="let声明的变量只在所处于的块级有效"><a href="#let声明的变量只在所处于的块级有效" class="headerlink" title="let声明的变量只在所处于的块级有效"></a>let声明的变量只在所处于的块级有效</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">     <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>使用let关键字声明的变量才具有块级作用域，使用var声明的变量不具备块级作用域特性。</p>
<h4 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// a is not defined </span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>
<h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><p>利用let声明的变量会绑定在这个块级作用域，不会受外界的影响</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">    tmp = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> tmp; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h4 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>]();</span><br><span class="line">arr[<span class="number">1</span>]();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>![](C:\Users\kevin\Desktop\前端\07-10 JavaScript网页编程\04-JavaScript高级资料\JavaScript 高级_day05\4-笔记\images\let面试题.png)</p>
<p><strong>经典面试题图解：</strong>此题的关键点在于变量i是全局的，函数执行时输出的都是全局作用域下的i值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>]();</span><br><span class="line">arr[<span class="number">1</span>]();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>![](C:\Users\kevin\Desktop\前端\07-10 JavaScript网页编程\04-JavaScript高级资料\JavaScript 高级_day05\4-笔记\images\let面试题2.png)</p>
<p><strong>经典面试题图解：</strong>此题的关键点在于每次循环都会产生一个块级作用域，每个块级作用域中的变量都是不同的，函数执行时输出的是自己上一级（循环产生的块级作用域）作用域下的i值.</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul>
<li>let关键字就是用来声明变量的</li>
<li>使用let关键字声明的变量具有块级作用域</li>
<li>在一个大括号中 使用let关键字声明的变量才具有块级作用域 var关键字是不具备这个特点的</li>
<li>防止循环变量变成全局变量</li>
<li>使用let关键字声明的变量没有变量提升</li>
<li>使用let关键字声明的变量具有暂时性死区特性</li>
</ul>
<h3 id="const（★★★）"><a href="#const（★★★）" class="headerlink" title="const（★★★）"></a>const（★★★）</h3><p>声明常量，常量就是值（内存地址）不能变化的量</p>
<h4 id="具有块级作用域"><a href="#具有块级作用域" class="headerlink" title="具有块级作用域"></a>具有块级作用域</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">     <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure>
<h4 id="声明常量时必须赋值"><a href="#声明常量时必须赋值" class="headerlink" title="声明常量时必须赋值"></a>声明常量时必须赋值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI; <span class="comment">// Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure>
<h4 id="常量赋值后，值不能修改"><a href="#常量赋值后，值不能修改" class="headerlink" title="常量赋值后，值不能修改"></a>常量赋值后，值不能修改</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line">PI = <span class="number">100</span>; <span class="comment">// Assignment to constant variable.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ary = [<span class="number">100</span>, <span class="number">200</span>];</span><br><span class="line">ary[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">ary[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(ary); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;]; </span></span><br><span class="line">ary = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]; <span class="comment">// Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>
<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul>
<li>const声明的变量是一个常量</li>
<li>既然是常量不能重新进行赋值，如果是基本数据类型，不能更改值，如果是复杂数据类型，不能更改地址值</li>
<li>声明 const时候必须要给定值</li>
</ul>
<h3 id="let、const、var-的区别"><a href="#let、const、var-的区别" class="headerlink" title="let、const、var 的区别"></a>let、const、var 的区别</h3><ul>
<li>使用 var 声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象</li>
<li>使用 let 声明的变量，其作用域为该语句所在的代码块内，不存在变量提升</li>
<li>使用 const 声明的是常量，在后面出现的代码中不能再修改该常量的值</li>
</ul>
<p>![](C:\Users\kevin\Desktop\前端\07-10 JavaScript网页编程\04-JavaScript高级资料\JavaScript 高级_day05\4-笔记\images\var&amp;let&amp;const区别.png)</p>
<h3 id="解构赋值（★★★）"><a href="#解构赋值（★★★）" class="headerlink" title="解构赋值（★★★）"></a>解构赋值（★★★）</h3><p>ES6中允许从数组中提取值，按照对应位置，对变量赋值，对象也可以实现解构</p>
<h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"> <span class="built_in">console</span>.log(a)<span class="comment">//1</span></span><br><span class="line"> <span class="built_in">console</span>.log(b)<span class="comment">//2</span></span><br><span class="line"> <span class="built_in">console</span>.log(c)<span class="comment">//3</span></span><br><span class="line"><span class="comment">//如果解构不成功，变量的值为undefined</span></span><br></pre></td></tr></table></figure>
<h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;; </span><br><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = person;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// &#x27;zhangsan&#x27; </span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: myName, <span class="attr">age</span>: myAge&#125; = person; <span class="comment">// myName myAge 属于别名</span></span><br><span class="line"><span class="built_in">console</span>.log(myName); <span class="comment">// &#x27;zhangsan&#x27; </span></span><br><span class="line"><span class="built_in">console</span>.log(myAge); <span class="comment">// 20</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ul>
<li>解构赋值就是把数据结构分解，然后给变量进行赋值</li>
<li>如果结构不成功，变量跟数值个数不匹配的时候，变量的值为undefined</li>
<li>数组解构用中括号包裹，多个变量用逗号隔开，对象解构用花括号包裹，多个变量用逗号隔开</li>
<li>利用解构赋值能够让我们方便的去取对象中的属性跟方法</li>
</ul>
<h3 id="箭头函数（★★★）"><a href="#箭头函数（★★★）" class="headerlink" title="箭头函数（★★★）"></a>箭头函数（★★★）</h3><p>ES6中新增的定义函数的方式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">() =&gt; &#123;&#125; <span class="comment">//()：代表是函数； =&gt;：必须要的符号，指向哪一个代码块；&#123;&#125;：函数体</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">() =&gt;</span> &#123;&#125;<span class="comment">//代表把一个函数赋值给fn</span></span><br></pre></td></tr></table></figure>
<p>函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> num1 + num2; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es6写法</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果形参只有一个，可以省略小括号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> v;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="comment">//es6写法</span></span><br><span class="line"> <span class="keyword">const</span> fn = <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>箭头函数不绑定this关键字，箭头函数中的this，指向的是函数定义位置的上下文this</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>&#125; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">     <span class="built_in">console</span>.log(<span class="built_in">this</span>);<span class="comment">//this 指向 是obj对象</span></span><br><span class="line">     <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123; </span><br><span class="line">         <span class="built_in">console</span>.log(<span class="built_in">this</span>);<span class="comment">//this 指向 的是箭头函数定义的位置，那么这个箭头函数定义在fn里面，而这个fn指向是的obj对象，所以这个this也指向是obj对象</span></span><br><span class="line">     &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">const</span> resFn = fn.call(obj); </span><br><span class="line"> resFn();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><ul>
<li>箭头函数中不绑定this，箭头函数中的this指向是它所定义的位置，可以简单理解成，定义箭头函数中的作用域的this指向谁，它就指向谁</li>
<li>箭头函数的优点在于解决了this执行环境所造成的一些问题。比如：解决了匿名函数this指向的问题（匿名函数的执行环境具有全局性），包括setTimeout和setInterval中使用this所造成的问题</li>
</ul>
<h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	age: <span class="number">20</span>,</span><br><span class="line">	say: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">		alert(<span class="built_in">this</span>.age)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.say();<span class="comment">//箭头函数this指向的是被声明的作用域里面，而对象没有作用域的，所以箭头函数虽然在对象中被定义，但是this指向的是全局作用域</span></span><br></pre></td></tr></table></figure>
<h3 id="剩余参数（★★）"><a href="#剩余参数（★★）" class="headerlink" title="剩余参数（★★）"></a>剩余参数（★★）</h3><p>剩余参数语法允许我们将一个不定数量的参数表示为一个数组，不定参数定义方式，这种方式很方便的去声明不知道参数情况下的一个函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">first, ...args</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(first); <span class="comment">// 10</span></span><br><span class="line">     <span class="built_in">console</span>.log(args); <span class="comment">// [20, 30] </span></span><br><span class="line"> &#125;</span><br><span class="line"> sum(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="剩余参数和解构配合使用"><a href="#剩余参数和解构配合使用" class="headerlink" title="剩余参数和解构配合使用"></a>剩余参数和解构配合使用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> students = [<span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [s1, ...s2] = students; </span><br><span class="line"><span class="built_in">console</span>.log(s1);  <span class="comment">// &#x27;wangwu&#x27; </span></span><br><span class="line"><span class="built_in">console</span>.log(s2);  <span class="comment">// [&#x27;zhangsan&#x27;, &#x27;lisi&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="ES6-的内置对象扩展"><a href="#ES6-的内置对象扩展" class="headerlink" title="ES6 的内置对象扩展"></a>ES6 的内置对象扩展</h2><h3 id="Array-的扩展方法（★★）"><a href="#Array-的扩展方法（★★）" class="headerlink" title="Array 的扩展方法（★★）"></a>Array 的扩展方法（★★）</h3><h4 id="扩展运算符（展开语法）"><a href="#扩展运算符（展开语法）" class="headerlink" title="扩展运算符（展开语法）"></a>扩展运算符（展开语法）</h4><p>扩展运算符可以将数组或者对象转为用逗号分隔的参数序列</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">...ary  <span class="comment">// 1, 2, 3</span></span><br><span class="line"><span class="built_in">console</span>.log(...ary);    <span class="comment">// 1 2 3,相当于下面的代码</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<h5 id="扩展运算符可以应用于合并数组"><a href="#扩展运算符可以应用于合并数组" class="headerlink" title="扩展运算符可以应用于合并数组"></a>扩展运算符可以应用于合并数组</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一 </span></span><br><span class="line"> <span class="keyword">let</span> ary1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"> <span class="keyword">let</span> ary2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"> <span class="keyword">let</span> ary3 = [...ary1, ...ary2];</span><br><span class="line"> <span class="comment">// 方法二 </span></span><br><span class="line"> ary1.push(...ary2);</span><br></pre></td></tr></table></figure>
<h5 id="将类数组或可遍历对象转换为真正的数组"><a href="#将类数组或可遍历对象转换为真正的数组" class="headerlink" title="将类数组或可遍历对象转换为真正的数组"></a>将类数组或可遍历对象转换为真正的数组</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> oDivs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>); </span><br><span class="line">oDivs = [...oDivs];</span><br></pre></td></tr></table></figure>
<h4 id="构造函数方法：Array-from"><a href="#构造函数方法：Array-from" class="headerlink" title="构造函数方法：Array.from()"></a>构造函数方法：Array.from()</h4><p>将伪数组或可遍历对象转换为真正的数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个集合</span></span><br><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    length: <span class="number">3</span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">//转成数组</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arrayLike); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>
<p>方法还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123; </span><br><span class="line">    <span class="string">&quot;0&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;1&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;length&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newAry = <span class="built_in">Array</span>.from(arrayLike, <span class="function"><span class="params">item</span> =&gt;</span> item *<span class="number">2</span>)<span class="comment">//[2,4]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意：如果是对象，那么属性需要写对应的索引</p>
<h4 id="实例方法：find"><a href="#实例方法：find" class="headerlink" title="实例方法：find()"></a>实例方法：find()</h4><p>用于找出第一个符合条件的数组成员，如果没有找到返回undefined</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [&#123;</span><br><span class="line">     id: <span class="number">1</span>,</span><br><span class="line">     name: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"> &#125;, &#123; </span><br><span class="line">     id: <span class="number">2</span>,</span><br><span class="line">     name: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line"> &#125;]; </span><br><span class="line"> <span class="keyword">let</span> target = ary.find(<span class="function">(<span class="params">item, index</span>) =&gt;</span> item.id == <span class="number">2</span>);<span class="comment">//找数组里面符合条件的值，当数组中元素id等于2的查找出来，注意，只会匹配第一个</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="实例方法：findIndex"><a href="#实例方法：findIndex" class="headerlink" title="实例方法：findIndex()"></a>实例方法：findIndex()</h4><p>用于找出第一个符合条件的数组成员的位置，如果没有找到返回-1</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line"><span class="keyword">let</span> index = ary.findIndex(<span class="function">(<span class="params">value, index</span>) =&gt;</span> value &gt; <span class="number">9</span>); </span><br><span class="line"><span class="built_in">console</span>.log(index); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<h4 id="实例方法：includes"><a href="#实例方法：includes" class="headerlink" title="实例方法：includes()"></a>实例方法：includes()</h4><p>判断某个数组是否包含给定的值，返回布尔值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>) <span class="comment">// true </span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>) <span class="comment">// false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="String-的扩展方法"><a href="#String-的扩展方法" class="headerlink" title="String 的扩展方法"></a>String 的扩展方法</h3><h4 id="模板字符串（★★★）"><a href="#模板字符串（★★★）" class="headerlink" title="模板字符串（★★★）"></a>模板字符串（★★★）</h4><p>ES6新增的创建字符串的方式，使用反引号定义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">`zhangsan`</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="模板字符串中可以解析变量"><a href="#模板字符串中可以解析变量" class="headerlink" title="模板字符串中可以解析变量"></a>模板字符串中可以解析变量</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;张三&#x27;</span>; </span><br><span class="line"><span class="keyword">let</span> sayHello = <span class="string">`hello,my name is <span class="subst">$&#123;name&#125;</span>`</span>; <span class="comment">// hello, my name is zhangsan</span></span><br></pre></td></tr></table></figure>
<h5 id="模板字符串中可以换行"><a href="#模板字符串中可以换行" class="headerlink" title="模板字符串中可以换行"></a>模板字符串中可以换行</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = &#123; </span><br><span class="line">    name: <span class="string">&#x27;zhangsan&#x27;</span>, </span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    sex: <span class="string">&#x27;男&#x27;</span> </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> html = <span class="string">` &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;<span class="subst">$&#123;result.name&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;<span class="subst">$&#123;result.age&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;<span class="subst">$&#123;result.sex&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt; `</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="在模板字符串中可以调用函数"><a href="#在模板字符串中可以调用函数" class="headerlink" title="在模板字符串中可以调用函数"></a>在模板字符串中可以调用函数</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;哈哈哈哈 追不到我吧 我就是这么强大&#x27;</span>;</span><br><span class="line"> &#125;; </span><br><span class="line"> <span class="keyword">let</span> greet = <span class="string">`<span class="subst">$&#123;sayHello()&#125;</span> 哈哈哈哈`</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(greet); <span class="comment">// 哈哈哈哈 追不到我吧 我就是这么强大 哈哈哈哈</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="实例方法：startsWith-和-endsWith"><a href="#实例方法：startsWith-和-endsWith" class="headerlink" title="实例方法：startsWith() 和 endsWith()"></a>实例方法：startsWith() 和 endsWith()</h4><ul>
<li>startsWith()：表示参数字符串是否在原字符串的头部，返回布尔值</li>
<li>endsWith()：表示参数字符串是否在原字符串的尾部，返回布尔值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Hello world!&#x27;</span>;</span><br><span class="line">str.startsWith(<span class="string">&#x27;Hello&#x27;</span>) <span class="comment">// true </span></span><br><span class="line">str.endsWith(<span class="string">&#x27;!&#x27;</span>)       <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="实例方法：repeat"><a href="#实例方法：repeat" class="headerlink" title="实例方法：repeat()"></a>实例方法：repeat()</h4><p>repeat方法表示将原字符串重复n次，返回一个新字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.repeat(<span class="number">3</span>)      <span class="comment">// &quot;xxx&quot; </span></span><br><span class="line"><span class="string">&#x27;hello&#x27;</span>.repeat(<span class="number">2</span>)  <span class="comment">// &quot;hellohello&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="Set-数据结构（★★）"><a href="#Set-数据结构（★★）" class="headerlink" title="Set 数据结构（★★）"></a>Set 数据结构（★★）</h3><p>ES6 提供了新的数据结构  Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p>
<p>Set本身是一个构造函数，用来生成  Set  数据结构</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br></pre></td></tr></table></figure>
<p>Set函数可以接受一个数组作为参数，用来初始化。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);<span class="comment">//&#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><ul>
<li>add(value)：添加某个值，返回 Set 结构本身</li>
<li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功</li>
<li>has(value)：返回一个布尔值，表示该值是否为 Set 的成员</li>
<li>clear()：清除所有成员，没有返回值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">s.add(<span class="number">1</span>).add(<span class="number">2</span>).add(<span class="number">3</span>); <span class="comment">// 向 set 结构中添加值 </span></span><br><span class="line">s.delete(<span class="number">2</span>)             <span class="comment">// 删除 set 结构中的2值   </span></span><br><span class="line">s.has(<span class="number">1</span>)                <span class="comment">// 表示 set 结构中是否有1这个值 返回布尔值 </span></span><br><span class="line">s.clear()               <span class="comment">// 清除 set 结构中的所有值</span></span><br><span class="line"><span class="comment">//注意：删除的是元素的值，不是代表的索引</span></span><br></pre></td></tr></table></figure>
<h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>Set 结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">s.forEach(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML，XML，XHTML的区别</title>
    <url>/2020/09/03/HTML%EF%BC%8CXML%EF%BC%8CXHTML%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="HTML，XML，XHTML的区别"><a href="#HTML，XML，XHTML的区别" class="headerlink" title="HTML，XML，XHTML的区别"></a>HTML，XML，XHTML的区别</h2><a id="more"></a>
<p>HTML：HyperText Markup Language / 超文本标记语言</p>
<p>XML: Extensible Markup Language / 可扩展标记语言</p>
<p>XHTML: Extensible Hypertext Markup Language / 可扩展超文本标记语</p>
<h2 id="先从-HTML-说起。"><a href="#先从-HTML-说起。" class="headerlink" title="先从 HTML 说起。"></a>先从 HTML 说起。</h2><p>HTML 是用来描述和定义网页内容的标记语言，是构成网页的最基本的东西。<br>所谓超文本，就是说它除了能标记文本，还能标记其他的内容，比如：图片，链接，音频，视频等。<br>它的作用就是一个规范，告诉所有浏览器都统一标准，比如我给这段文字加个 <p> 标签，那就是告诉浏览器：这是一个段落。我加个 <img> 标签：这是一张图片，别弄错了。浏览器看到后，就会正确解析，产生相应的行为。</p>
<h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>它的表现形式就是给一个文档加一堆标签，说明每段文字是干什么的，有什么意义。这样做的目的是方便存储、传输、分享数据，人和机器都可以很方便的阅读。XML 和 HTML 有一个明显的区别就是：HTML 的标签都是预定义的，你不可以自己随便增加，比如你不能自造一个标签叫 <nihao>, 但是 XML 可以，你可以自己“发明”标签————这也是“可扩展的”一个含义。</p>
<h2 id="HTML-和-XML-一结合，就产生了-XHTML"><a href="#HTML-和-XML-一结合，就产生了-XHTML" class="headerlink" title="HTML 和 XML 一结合，就产生了 XHTML"></a>HTML 和 XML 一结合，就产生了 XHTML</h2><p>XHTML 就是以 XML 的语法形式来写 HTML.<br>XHTML 出现的原因是：HTML 是一种语法形式比较松散的标记语言，语法要求也不严格。比如大小可以混用，属性值随便你加不加引号，单引号还是双引号也随便你，标签也可以不闭合。HTML 标准的制定者 W3C 一看这样下去不行，所谓无规矩不成方圆，所以就把 XML 的语法形式往 HTML 上一套，出现了 XHTML，所以你也可以把 XHTML 理解为 HTML 的严格语法形式，除此之外，其它方面基本一样。<br>比如 XHTML 有一些强制的要求，如下：</p>
<ol>
<li><p>必须包含一个文件头声明 &lt;!DOCTYPE&gt;</p>
</li>
<li><p>所有元素名必须小写</p>
</li>
<li><p>所有空元素必须关闭</p>
</li>
<li><p>所有属性名必须小写</p>
</li>
<li><p>所有属性值必须加引号</p>
</li>
<li><p>所有布尔值属性必须加上属性值</p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>NFA的确定化</title>
    <url>/2020/03/12/NFA%E7%9A%84%E7%A1%AE%E5%AE%9A%E5%8C%96%EF%BC%88%E5%AD%90%E9%9B%86%E6%B3%95%EF%BC%89/</url>
    <content><![CDATA[<h2 id="NFA的确定化（子集法）"><a href="#NFA的确定化（子集法）" class="headerlink" title="NFA的确定化（子集法）"></a>NFA的确定化（子集法）</h2><a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/20200417150016943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mzg4NDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">如上图所示，实现一个词法分析器首先由其正规集写出他所对应的正规式，再由正规式转化为NFA；这一些部分是利于人去实现的；然后通过算法将这个NFA转化为DFA；在将DFA输入到上面的通用控制中，实现词法分析；LETex是按照这种思想实现的；<br>我们在这里只实现NFA的确定化；</p>
]]></content>
      <categories>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>N皇后问题</title>
    <url>/2020/01/02/N%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="N皇后问题解法"><a href="#N皇后问题解法" class="headerlink" title="N皇后问题解法"></a>N皇后问题解法</h2><a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">queue</span>[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Nqueue</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(k==N)&#123;<span class="comment">//作用是判断放的皇后行数是否超过N行 </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt;<span class="built_in">queue</span>[i]+<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;<span class="comment">//遍历k行的各个列 </span></span><br><span class="line">		<span class="keyword">int</span> j;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;k;j++)&#123;<span class="comment">//循环判断第k行的第i列，是否可以放置， </span></span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">queue</span>[j]==i||<span class="built_in">abs</span>(<span class="built_in">queue</span>[j]-i)==<span class="built_in">abs</span>(k-j))&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(j==k)&#123;</span><br><span class="line">			<span class="built_in">queue</span>[k] = i;</span><br><span class="line">			Nqueue(k+<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line">	Nqueue(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>N皇后问题：<br>递归回溯法求解，实际上是判断每一行上的第i列能否放上这个，不能，则什么都不做，函数返回；i++；如果可以放，赋值，然后调用Nqueue判断是否下一个可以，放，直到K==N，所有的N行全部放完，函数返回也就是回溯，然后判断上一行能不能放到下一个位置；每一行都有自己的i,如果可以向下判断，如果不能，i++,继续判断，如果到i等N还不行，那么函数返回到上一层；上一层继续判断；不考虑；<br>算法的乐趣，在于弄懂后如此简单，（也不简单），弄不懂犹如天书；<br>这个递归回溯相当于一个n^n重循环测试；递归回溯够巧妙！</p>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Router</title>
    <url>/2021/03/15/Vue-Router/</url>
    <content><![CDATA[<h1 id="在后台管理项目中Vue-Router的使用"><a href="#在后台管理项目中Vue-Router的使用" class="headerlink" title="在后台管理项目中Vue Router的使用"></a>在后台管理项目中Vue Router的使用</h1><a id="more"></a>

<h5 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h5><ul>
<li><p>在主页组件home中嵌套了子组件;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>路由router.js中加入组件；</p>
</li>
</ul>
<p><img src="C:\Users\kevin\AppData\Roaming\Typora\typora-user-images\image-20210315100714478.png" alt="image-20210315100714478"></p>
<h5 id="生命周期函数created"><a href="#生命周期函数created" class="headerlink" title="生命周期函数created"></a>生命周期函数created</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">created () &#123;</span><br><span class="line">  <span class="built_in">this</span>.getMenulist()<span class="comment">//得到左侧菜单数据</span></span><br><span class="line">  <span class="built_in">this</span>.activePath = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">&#x27;activePath&#x27;</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p>
<p>mounted</p>
<blockquote>
<p>为第四个生命周期函数，表示，内存中的模板，已经真实的挂载到了页面中，用户已经可以看到渲染好的页面了，经常使用在兄弟组件监听另一个兄弟组件发送个Bus的方法。</p>
</blockquote>
<h5 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$router.push(&#123;name:&#39;home&#39;,params:&#123;id:&#39;123&#39;,title: &#39;title2&#39;&#125;&#125;) </span><br></pre></td></tr></table></figure>
<p>在添加商品按钮方法里：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">goAddpage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.$router.push(<span class="string">&#x27;/goods/add&#x27;</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h5 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  component: Home,</span><br><span class="line"></span><br><span class="line">  redirect: <span class="string">&#x27;/welcome&#x27;</span></span><br></pre></td></tr></table></figure>
<h5 id="HTML5-History-模式"><a href="#HTML5-History-模式" class="headerlink" title="HTML5 History 模式"></a>HTML5 History 模式</h5><p><code>vue-router</code> 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。</p>
<h5 id="路由导航守卫"><a href="#路由导航守卫" class="headerlink" title="路由导航守卫"></a>路由导航守卫</h5><p>全局前置守卫</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.path === <span class="string">&#x27;/login&#x27;</span>) &#123; <span class="keyword">return</span> next() &#125; <span class="comment">// 没有判断将不会跳转</span></span><br><span class="line">  <span class="keyword">if</span> (to.path === <span class="string">&#x27;/home&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.sessionStorage.getItem(<span class="string">&#x27;token&#x27;</span>)) &#123; <span class="keyword">return</span> next() &#125; <span class="keyword">else</span> &#123; <span class="keyword">return</span> next(<span class="string">&#x27;/login&#x27;</span>) &#125;</span><br><span class="line">  &#125;&#125;</span><br></pre></td></tr></table></figure>
<h5 id="把组件按组分块"><a href="#把组件按组分块" class="headerlink" title="把组件按组分块"></a>把组件按组分块</h5><p>例如，我把商品列表，商品参数，商品类别，添加商品全部放置分组good中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Categories = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &#x27;good&#x27; */</span> <span class="string">&#x27;../components/good/Categories.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Params = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &#x27;good&#x27; */</span> <span class="string">&#x27;../components/good/Params.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Goods = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &#x27;good&#x27; */</span> <span class="string">&#x27;../components/good/List.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> AddGoods = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &#x27;good&#x27; */</span> <span class="string">&#x27;../components/good/AddGoods.vue&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue深入学习</title>
    <url>/2020/12/15/Vue%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="接口调用方式"><a href="#接口调用方式" class="headerlink" title="接口调用方式"></a>接口调用方式</h3><a id="more"></a>

<ul>
<li>原生ajax</li>
<li>基于jQuery的ajax</li>
<li>fetch</li>
<li>axios</li>
</ul>
<h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><ul>
<li>JavaScript的执行环境是「单线程」</li>
<li>所谓单线程，是指JS引擎中负责解释和执行JavaScript代码的线程只有一个，也就是一次只能完成一项任务，这个任务执行完后才能执行下一个，它会「阻塞」其他任务。这个任务可称为主线程</li>
<li>异步模式可以一起执行<strong>多个任务</strong></li>
<li>JS中常见的异步调用<ul>
<li>定时任何</li>
<li>ajax</li>
<li>事件函数</li>
</ul>
</li>
</ul>
<h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><ul>
<li>主要解决异步深层嵌套的问题</li>
<li>promise 提供了简洁的API  使得异步操作更加容易</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">  /*</span><br><span class="line"><span class="javascript">   <span class="number">1.</span> <span class="built_in">Promise</span>基本使用</span></span><br><span class="line"><span class="javascript">         我们使用<span class="keyword">new</span>来构建一个<span class="built_in">Promise</span>  <span class="built_in">Promise</span>的构造函数接收一个参数，是函数，并且传入两个参数：		   resolve，reject， 分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数</span></span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//2. 这里用于实现异步任务  setTimeout</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span>(flag) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//3. 正常情况</span></span></span><br><span class="line"><span class="javascript">        resolve(<span class="string">&#x27;hello&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//4. 异常情况</span></span></span><br><span class="line"><span class="javascript">        reject(<span class="string">&#x27;出错了&#x27;</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, 100);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="javascript">  <span class="comment">//  5 Promise实例生成以后，可以用then方法指定resolved状态和reject状态的回调函数 </span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//  在then方法中，你也可以直接return数据而不是Promise对象，在后面的then中就可以接收到数据了  </span></span></span><br><span class="line"><span class="javascript">  p.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">  &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">info</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(info)</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="基于Promise发送Ajax请求"><a href="#基于Promise发送Ajax请求" class="headerlink" title="基于Promise发送Ajax请求"></a>基于Promise发送Ajax请求</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">   /*</span><br><span class="line"><span class="javascript">     基于<span class="built_in">Promise</span>发送Ajax请求</span></span><br><span class="line">   */</span><br><span class="line"><span class="javascript">   <span class="function"><span class="keyword">function</span> <span class="title">queryData</span>(<span class="params">url</span>) </span>&#123;</span></span><br><span class="line">    #   1.1 创建一个Promise实例</span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">       xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">if</span>(xhr.readyState != <span class="number">4</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span></span><br><span class="line">           # 1.2 处理正常的情况</span><br><span class="line">           resolve(xhr.responseText);</span><br><span class="line"><span class="javascript">         &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line">           # 1.3 处理异常情况</span><br><span class="line"><span class="javascript">           reject(<span class="string">&#x27;服务器错误&#x27;</span>);</span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;;</span><br><span class="line"><span class="javascript">       xhr.open(<span class="string">&#x27;get&#x27;</span>, url);</span></span><br><span class="line"><span class="javascript">       xhr.send(<span class="literal">null</span>);</span></span><br><span class="line">     &#125;);</span><br><span class="line"><span class="javascript">     <span class="keyword">return</span> p;</span></span><br><span class="line">   &#125;</span><br><span class="line"># 注意：  这里需要开启一个服务 </span><br><span class="line">   # 在then方法中，你也可以直接return数据而不是Promise对象，在后面的then中就可以接收到数据了</span><br><span class="line"><span class="javascript">   queryData(<span class="string">&#x27;http://localhost:3000/data&#x27;</span>)</span></span><br><span class="line"><span class="javascript">     .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(data)</span></span><br><span class="line">       #  1.4 想要继续链式编程下去 需要 return  </span><br><span class="line"><span class="javascript">       <span class="keyword">return</span> queryData(<span class="string">&#x27;http://localhost:3000/data1&#x27;</span>);</span></span><br><span class="line">     &#125;)</span><br><span class="line"><span class="javascript">     .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">       <span class="keyword">return</span> queryData(<span class="string">&#x27;http://localhost:3000/data2&#x27;</span>);</span></span><br><span class="line">     &#125;)</span><br><span class="line"><span class="javascript">     .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(data)</span></span><br><span class="line">     &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Promise-基本API"><a href="#Promise-基本API" class="headerlink" title="Promise  基本API"></a>Promise  基本API</h3><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><h5 id="then"><a href="#then" class="headerlink" title=".then()"></a>.then()</h5><ul>
<li>得到异步任务正确的结果</li>
</ul>
<h5 id="catch"><a href="#catch" class="headerlink" title=".catch()"></a>.catch()</h5><ul>
<li>获取异常信息</li>
</ul>
<h5 id="finally"><a href="#finally" class="headerlink" title=".finally()"></a>.finally()</h5><ul>
<li>成功与否都会执行（不是正式标准） </li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">  /*</span><br><span class="line"><span class="javascript">    <span class="built_in">Promise</span>常用API-实例方法</span></span><br><span class="line">  */</span><br><span class="line"><span class="javascript">  <span class="comment">// console.dir(Promise);</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// resolve(123);</span></span></span><br><span class="line"><span class="javascript">        reject(<span class="string">&#x27;error&#x27;</span>);</span></span><br><span class="line">      &#125;, 100);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="comment">// foo()</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//   .then(function(data)&#123;</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//     console.log(data)</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//   &#125;)</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//   .catch(function(data)&#123;</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//     console.log(data)</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//   &#125;)</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//   .finally(function()&#123;</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//     console.log(&#x27;finished&#x27;)</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//   &#125;);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// --------------------------</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 两种写法是等效的</span></span></span><br><span class="line">  foo()</span><br><span class="line"><span class="javascript">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line">      # 得到异步任务正确的结果</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line">      # 获取异常信息</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(data)</span></span><br><span class="line">    &#125;)</span><br><span class="line">    # 成功与否都会执行（不是正式标准） </span><br><span class="line"><span class="javascript">    .finally(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;finished&#x27;</span>)</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><h5 id="all"><a href="#all" class="headerlink" title=".all()"></a>.all()</h5><ul>
<li><code>Promise.all</code>方法接受一个数组作参数，数组中的对象（p1、p2、p3）均为promise实例（如果不是一个promise，该项会被用<code>Promise.resolve</code>转换为一个promise)。它的状态由这三个promise实例决定</li>
</ul>
<h5 id="race"><a href="#race" class="headerlink" title=".race()"></a>.race()</h5><ul>
<li><code>Promise.race</code>方法同样接受一个数组作参数。当p1, p2, p3中有一个实例的状态发生改变（变为<code>fulfilled</code>或<code>rejected</code>），p的状态就跟着改变。并把第一个改变状态的promise的返回值，传给p的回调函数</li>
</ul>
<p>​    </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">  /*</span><br><span class="line"><span class="javascript">    <span class="built_in">Promise</span>常用API-对象方法</span></span><br><span class="line">  */</span><br><span class="line"><span class="javascript">  <span class="comment">// console.dir(Promise)</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">queryData</span>(<span class="params">url</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(xhr.readyState != <span class="number">4</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 处理正常的情况</span></span></span><br><span class="line">          resolve(xhr.responseText);</span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 处理异常情况</span></span></span><br><span class="line"><span class="javascript">          reject(<span class="string">&#x27;服务器错误&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="javascript">      xhr.open(<span class="string">&#x27;get&#x27;</span>, url);</span></span><br><span class="line"><span class="javascript">      xhr.send(<span class="literal">null</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> p1 = queryData(<span class="string">&#x27;http://localhost:3000/a1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> p2 = queryData(<span class="string">&#x27;http://localhost:3000/a2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> p3 = queryData(<span class="string">&#x27;http://localhost:3000/a3&#x27;</span>);</span></span><br><span class="line"><span class="javascript">   <span class="built_in">Promise</span>.all([p1,p2,p3]).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">     <span class="comment">//   all 中的参数  [p1,p2,p3]   和 返回的结果一 一对应[&quot;HELLO TOM&quot;, &quot;HELLO JERRY&quot;, &quot;HELLO SPIKE&quot;]</span></span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(result) <span class="comment">//[&quot;HELLO TOM&quot;, &quot;HELLO JERRY&quot;, &quot;HELLO SPIKE&quot;]</span></span></span><br><span class="line">   &#125;)</span><br><span class="line"><span class="javascript">  <span class="built_in">Promise</span>.race([p1,p2,p3]).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 由于p1执行较快，Promise的then()将获得结果&#x27;P1&#x27;。p2,p3仍在继续执行，但执行结果将被丢弃。</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(result) <span class="comment">// &quot;HELLO TOM&quot;</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><ul>
<li>Fetch API是新的ajax解决方案 Fetch会返回Promise</li>
<li><strong>fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象</strong>。</li>
<li>fetch(url, options).then(）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">  /*</span><br><span class="line">    Fetch API 基本用法</span><br><span class="line">    	fetch(url).then()</span><br><span class="line"><span class="javascript">   	第一个参数请求的路径   Fetch会返回<span class="built_in">Promise</span>   所以我们可以使用then 拿到请求成功的结果 </span></span><br><span class="line">  */</span><br><span class="line"><span class="javascript">  fetch(<span class="string">&#x27;http://localhost:3000/fdata&#x27;</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// text()方法属于fetchAPI的一部分，它返回一个Promise实例对象，用于获取后台返回的数据</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> data.text();</span></span><br><span class="line"><span class="javascript">  &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//   在这个then里面我们能拿到最终的数据  </span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(data);</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="fetch-API-中的-HTTP-请求"><a href="#fetch-API-中的-HTTP-请求" class="headerlink" title="fetch API  中的 HTTP  请求"></a>fetch API  中的 HTTP  请求</h4><ul>
<li>fetch(url, options).then(）</li>
<li>HTTP协议，它给我们提供了很多的方法，如POST，GET，DELETE，UPDATE，PATCH和PUT<ul>
<li>默认的是 GET 请求</li>
<li>需要在 options 对象中 指定对应的 method       method:请求使用的方法 </li>
<li>post 和 普通 请求的时候 需要在options 中 设置  请求头 headers   和  body</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">     /*</span><br><span class="line">           Fetch API 调用接口传递参数</span><br><span class="line">     */</span><br><span class="line">    #1.1 GET参数传递 - 传统URL  通过url  ？ 的形式传参 </span><br><span class="line"><span class="javascript">     fetch(<span class="string">&#x27;http://localhost:3000/books?id=123&#x27;</span>, &#123;</span></span><br><span class="line">         	# get 请求可以省略不写 默认的是GET </span><br><span class="line"><span class="javascript">             method: <span class="string">&#x27;get&#x27;</span></span></span><br><span class="line">         &#125;)</span><br><span class="line"><span class="javascript">         .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line">         	# 它返回一个Promise实例对象，用于获取后台返回的数据</span><br><span class="line"><span class="javascript">             <span class="keyword">return</span> data.text();</span></span><br><span class="line"><span class="javascript">         &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line">         	# 在这个then里面我们能拿到最终的数据  </span><br><span class="line"><span class="javascript">             <span class="built_in">console</span>.log(data)</span></span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">   #1.2  GET参数传递  restful形式的URL  通过/ 的形式传递参数  即  id = 456 和id后台的配置有关   </span><br><span class="line"><span class="javascript">     fetch(<span class="string">&#x27;http://localhost:3000/books/456&#x27;</span>, &#123;</span></span><br><span class="line">         	# get 请求可以省略不写 默认的是GET </span><br><span class="line"><span class="javascript">             method: <span class="string">&#x27;get&#x27;</span></span></span><br><span class="line">         &#125;)</span><br><span class="line"><span class="javascript">         .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="keyword">return</span> data.text();</span></span><br><span class="line"><span class="javascript">         &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="built_in">console</span>.log(data)</span></span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">    #2.1  DELETE请求方式参数传递      删除id  是  id=789</span><br><span class="line"><span class="javascript">     fetch(<span class="string">&#x27;http://localhost:3000/books/789&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">             method: <span class="string">&#x27;delete&#x27;</span></span></span><br><span class="line">         &#125;)</span><br><span class="line"><span class="javascript">         .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="keyword">return</span> data.text();</span></span><br><span class="line"><span class="javascript">         &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="built_in">console</span>.log(data)</span></span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">    #3 POST请求传参</span><br><span class="line"><span class="javascript">     fetch(<span class="string">&#x27;http://localhost:3000/books&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">             method: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line">         	# 3.1  传递数据 </span><br><span class="line"><span class="javascript">             body: <span class="string">&#x27;uname=lisi&amp;pwd=123&#x27;</span>,</span></span><br><span class="line">         	#  3.2  设置请求头 </span><br><span class="line">             headers: &#123;</span><br><span class="line"><span class="javascript">                 <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;)</span><br><span class="line"><span class="javascript">         .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="keyword">return</span> data.text();</span></span><br><span class="line"><span class="javascript">         &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="built_in">console</span>.log(data)</span></span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">    # POST请求传参</span><br><span class="line"><span class="javascript">     fetch(<span class="string">&#x27;http://localhost:3000/books&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">             method: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="javascript">             body: <span class="built_in">JSON</span>.stringify(&#123;</span></span><br><span class="line"><span class="javascript">                 uname: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                 pwd: <span class="string">&#x27;456&#x27;</span></span></span><br><span class="line">             &#125;),</span><br><span class="line">             headers: &#123;</span><br><span class="line"><span class="javascript">                 <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;)</span><br><span class="line"><span class="javascript">         .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="keyword">return</span> data.text();</span></span><br><span class="line"><span class="javascript">         &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="built_in">console</span>.log(data)</span></span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">     # PUT请求传参     修改id 是 123 的 </span><br><span class="line"><span class="javascript">     fetch(<span class="string">&#x27;http://localhost:3000/books/123&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">             method: <span class="string">&#x27;put&#x27;</span>,</span></span><br><span class="line"><span class="javascript">             body: <span class="built_in">JSON</span>.stringify(&#123;</span></span><br><span class="line"><span class="javascript">                 uname: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                 pwd: <span class="string">&#x27;789&#x27;</span></span></span><br><span class="line">             &#125;),</span><br><span class="line">             headers: &#123;</span><br><span class="line"><span class="javascript">                 <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;)</span><br><span class="line"><span class="javascript">         .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="keyword">return</span> data.text();</span></span><br><span class="line"><span class="javascript">         &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="built_in">console</span>.log(data)</span></span><br><span class="line">         &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="fetchAPI-中-响应格式"><a href="#fetchAPI-中-响应格式" class="headerlink" title="fetchAPI 中 响应格式"></a>fetchAPI 中 响应格式</h4><ul>
<li>用fetch来获取数据，如果响应正常返回，我们首先看到的是一个response对象，其中包括返回的一堆原始字节，这些字节需要在收到后，需要我们通过调用方法将其转换为相应格式的数据，比如<code>JSON</code>，<code>BLOB</code>或者<code>TEXT</code>等等</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Fetch响应结果的数据格式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">fetch(<span class="string">&#x27;http://localhost:3000/json&#x27;</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// return data.json();   //  将获取到的数据使用 json 转换对象</span></span><br><span class="line">  <span class="keyword">return</span> data.text(); <span class="comment">//  //  将获取到的数据 转换成字符串 </span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// console.log(data.uname)</span></span><br><span class="line">  <span class="comment">// console.log(typeof data)</span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">  <span class="built_in">console</span>.log(obj.uname,obj.age,obj.gender)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><ul>
<li>基于promise用于浏览器和node.js的http客户端</li>
<li>支持浏览器和node.js</li>
<li>支持promise</li>
<li>能拦截请求和响应</li>
<li>自动转换JSON数据</li>
<li>能转换请求和响应数据</li>
</ul>
<h4 id="axios基础用法"><a href="#axios基础用法" class="headerlink" title="axios基础用法"></a>axios基础用法</h4><ul>
<li>get和 delete请求传递参数<ul>
<li>通过传统的url  以 ? 的形式传递参数</li>
<li> restful 形式传递参数 </li>
<li>通过params  形式传递参数 </li>
</ul>
</li>
<li>post  和 put  请求传递参数<ul>
<li>通过选项传递参数</li>
<li> 通过 URLSearchParams  传递参数 </li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   # 1. 发送get 请求 </span><br><span class="line">axios.get(<span class="string">&#x27;http://localhost:3000/adata&#x27;</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123; </span><br><span class="line">     #  拿到 ret 是一个对象      所有的对象都存在 ret 的data 属性里面</span><br><span class="line">     <span class="comment">// 注意data属性是固定的用法，用于获取后台的实际数据</span></span><br><span class="line">     <span class="comment">// console.log(ret.data)</span></span><br><span class="line">     <span class="built_in">console</span>.log(ret)</span><br><span class="line">   &#125;)</span><br><span class="line"># 2.  get 请求传递参数</span><br><span class="line">   # 2.1  通过传统的url  以 ? 的形式传递参数</span><br><span class="line">axios.get(<span class="string">&#x27;http://localhost:3000/axios?id=123&#x27;</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(ret.data)</span><br><span class="line">   &#125;)</span><br><span class="line">   # 2.2  restful 形式传递参数 </span><br><span class="line">   axios.get(<span class="string">&#x27;http://localhost:3000/axios/123&#x27;</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(ret.data)</span><br><span class="line">   &#125;)</span><br><span class="line"># 2.3  通过params  形式传递参数 </span><br><span class="line">   axios.get(<span class="string">&#x27;http://localhost:3000/axios&#x27;</span>, &#123;</span><br><span class="line">     params: &#123;</span><br><span class="line">       id: <span class="number">789</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(ret.data)</span><br><span class="line">   &#125;)</span><br><span class="line">#3 axios delete 请求传参     传参的形式和 get 请求一样</span><br><span class="line">   axios.delete(<span class="string">&#x27;http://localhost:3000/axios&#x27;</span>, &#123;</span><br><span class="line">     params: &#123;</span><br><span class="line">       id: <span class="number">111</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(ret.data)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"># 4  axios 的 post 请求</span><br><span class="line">   # 4.1  通过选项传递参数</span><br><span class="line">   axios.post(<span class="string">&#x27;http://localhost:3000/axios&#x27;</span>, &#123;</span><br><span class="line">     uname: <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">     pwd: <span class="number">123</span></span><br><span class="line">   &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(ret.data)</span><br><span class="line">   &#125;)</span><br><span class="line"># 4.2  通过 URLSearchParams  传递参数 </span><br><span class="line">   <span class="keyword">var</span> params = <span class="keyword">new</span> URLSearchParams();</span><br><span class="line">   params.append(<span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line">   params.append(<span class="string">&#x27;pwd&#x27;</span>, <span class="string">&#x27;111&#x27;</span>);</span><br><span class="line">   axios.post(<span class="string">&#x27;http://localhost:3000/axios&#x27;</span>, params).then(<span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(ret.data)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">	#5  axios put 请求传参   和 post 请求一样 </span><br><span class="line">   axios.put(<span class="string">&#x27;http://localhost:3000/axios/123&#x27;</span>, &#123;</span><br><span class="line">     uname: <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">     pwd: <span class="number">123</span></span><br><span class="line">   &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(ret.data)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="axios-全局配置"><a href="#axios-全局配置" class="headerlink" title="axios 全局配置"></a>axios 全局配置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#  配置公共的请求头 </span><br><span class="line">axios.defaults.baseURL = <span class="string">&#x27;https://api.example.com&#x27;</span>;</span><br><span class="line">#  配置 超时时间</span><br><span class="line">axios.defaults.timeout = <span class="number">2500</span>;</span><br><span class="line">#  配置公共的请求头</span><br><span class="line">axios.defaults.headers.common[<span class="string">&#x27;Authorization&#x27;</span>] = AUTH_TOKEN;</span><br><span class="line"># 配置公共的 post 的 Content-Type</span><br><span class="line">axios.defaults.headers.post[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="axios-拦截器"><a href="#axios-拦截器" class="headerlink" title="axios 拦截器"></a>axios 拦截器</h4><ul>
<li>请求拦截器<ul>
<li>请求拦截器的作用是在请求发送前进行一些操作<ul>
<li>例如在每个请求体里加上token，统一做了处理如果以后要改也非常容易</li>
</ul>
</li>
</ul>
</li>
<li>响应拦截器<ul>
<li>响应拦截器的作用是在接收到响应后进行一些操作<ul>
<li>例如在服务器返回登录状态失效，需要重新登录的时候，跳转到登录页</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 1. 请求拦截器 </span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(config.url)</span><br><span class="line">     # 1.1  任何请求都会经过这一步   在发送请求之前做些什么   </span><br><span class="line">     config.headers.mytoken = <span class="string">&#x27;nihao&#x27;</span>;</span><br><span class="line">     # 1.2  这里一定要return   否则配置不成功  </span><br><span class="line">     <span class="keyword">return</span> config;</span><br><span class="line">   &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">      #1.3 对请求错误做点什么    </span><br><span class="line">     <span class="built_in">console</span>.log(err)</span><br><span class="line">   &#125;)</span><br><span class="line">#2. 响应拦截器 </span><br><span class="line">   axios.interceptors.response.use(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">     #2.1  在接收响应做些什么  </span><br><span class="line">     <span class="keyword">var</span> data = res.data;</span><br><span class="line">     <span class="keyword">return</span> data;</span><br><span class="line">   &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">     #2.2 对响应错误做点什么  </span><br><span class="line">     <span class="built_in">console</span>.log(err)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async  和 await"></a>async  和 await</h3><ul>
<li>async作为一个关键字放到函数前面<ul>
<li>任何一个<code>async</code>函数都会隐式返回一个<code>promise</code></li>
</ul>
</li>
<li><code>await</code>关键字只能在使用<code>async</code>定义的函数中使用<ul>
<li>​    await后面可以直接跟一个 Promise实例对象</li>
<li>​     await函数不能单独使用</li>
</ul>
</li>
<li><strong>async/await 让异步代码看起来、表现起来更像同步代码</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">	# 1.  async 基础用法</span><br><span class="line">   # 1.1 async作为一个关键字放到函数前面</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">queryData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     # 1.2 await关键字只能在使用async定义的函数中使用      await后面可以直接跟一个 Promise实例对象</span><br><span class="line">     <span class="keyword">var</span> ret = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         resolve(<span class="string">&#x27;nihao&#x27;</span>)</span><br><span class="line">       &#125;,<span class="number">1000</span>);</span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="comment">// console.log(ret.data)</span></span><br><span class="line">     <span class="keyword">return</span> ret;</span><br><span class="line">   &#125;</span><br><span class="line"># 1.3 任何一个async函数都会隐式返回一个promise   我们可以使用then 进行链式编程</span><br><span class="line">   queryData().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(data)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">#2.  async    函数处理多个异步函数</span><br><span class="line">   axios.defaults.baseURL = <span class="string">&#x27;http://localhost:3000&#x27;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">queryData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     # 2.1  添加await之后 当前的await 返回结果之后才会执行后面的代码   </span><br><span class="line">     </span><br><span class="line">     <span class="keyword">var</span> info = <span class="keyword">await</span> axios.get(<span class="string">&#x27;async1&#x27;</span>);</span><br><span class="line">     #2.2  让异步代码看起来、表现起来更像同步代码</span><br><span class="line">     <span class="keyword">var</span> ret = <span class="keyword">await</span> axios.get(<span class="string">&#x27;async2?info=&#x27;</span> + info.data);</span><br><span class="line">     <span class="keyword">return</span> ret.data;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   queryData().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(data)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue第一个项目总结</title>
    <url>/2021/03/14/Vue%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="基于Vue的后台管理系统的项目总结"><a href="#基于Vue的后台管理系统的项目总结" class="headerlink" title="基于Vue的后台管理系统的项目总结"></a>基于Vue的后台管理系统的项目总结</h1><a id="more"></a>

<ul>
<li><a href="###%E6%8A%80%E6%9C%AF%E7%82%B9">技术点</a></li>
<li><a href="###%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98">遇到的问题</a></li>
</ul>
<h3 id="关键的一些技术点"><a href="#关键的一些技术点" class="headerlink" title="关键的一些技术点"></a>关键的一些技术点</h3><h5 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h5><ul>
<li>因为是存在跨域问题，所以我们使用Token来进行状态保持，在登录成功以后以后向服务器发送请求，都需要携带token，使用路由导航守卫控制；并把token保存到sessionStorage(会话期间保存)</li>
</ul>
<h5 id="配置Axios发起登录请求"><a href="#配置Axios发起登录请求" class="headerlink" title="配置Axios发起登录请求"></a>配置Axios发起登录请求</h5><ul>
<li>配置请求根路径 axios.defaultUrl = “…..”</li>
<li>在main.js中给全局Vue挂载Vue.prototype.$http = axios</li>
</ul>
<h5 id="使用less语法"><a href="#使用less语法" class="headerlink" title="使用less语法"></a>使用less语法</h5><ul>
<li>由于Vue没有初始化less-loader，需要自己手动导入才可以使用less语法.在assert的css中创建一个global.css用来层叠样式，并在入口文件中导入全局样式表</li>
</ul>
<h5 id="使用表单验证"><a href="#使用表单验证" class="headerlink" title="使用表单验证"></a>使用表单验证</h5><ul>
<li><p>表单的数据绑定和数据验证，form 和 rules  如果验证通过，则发送axios请求，判断请求成功与否，成功就返回携带token返回</p>
</li>
<li><p>引入一个新组件的几个步骤，在根组件中加入<router-view></router-view> ,然后在router.js中设置路由规则</p>
</li>
</ul>
<h5 id="获得axios的返回值"><a href="#获得axios的返回值" class="headerlink" title="获得axios的返回值"></a>获得axios的返回值</h5><ul>
<li>const {data：res} （es6解构赋值）；使用await、async 简化promise操作。</li>
</ul>
<h5 id="Element-UI中的message消息提示"><a href="#Element-UI中的message消息提示" class="headerlink" title="Element-UI中的message消息提示"></a>Element-UI中的message消息提示</h5><p>在elememnt.js中导入，并且需要全局挂载，Vue.prototype.$message = message ，这样每一个组件都可以通过this.$message 访问方法。</p>
<h5 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h5><ul>
<li>登录成功后使用编程式导航到home，this.$router.push(“/home”)</li>
</ul>
<h5 id="路由导航守卫"><a href="#路由导航守卫" class="headerlink" title="路由导航守卫"></a>路由导航守卫</h5><ul>
<li>根据用户访问的页面和session中的token来进行路由导航。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">router.beforeEach((to,form,next)&#x3D;&gt;&#123;</span><br><span class="line">	&#x2F;&#x2F; to 去哪个页面</span><br><span class="line">	&#x2F;&#x2F;from 从哪里来</span><br><span class="line">	&#x2F;&#x2F; next 放行next()直接放行，next(&#39;&#x2F;home&#39;)强制跳转到登录页</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h5 id="通过axios请求拦截器添加token"><a href="#通过axios请求拦截器添加token" class="headerlink" title="通过axios请求拦截器添加token"></a>通过axios请求拦截器添加token</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">	config.headers.Authorization = <span class="built_in">window</span>.sessionStorage.getItem()</span><br><span class="line">	<span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h5 id="生命周期函数created"><a href="#生命周期函数created" class="headerlink" title="生命周期函数created"></a>生命周期函数created</h5><p>created是指组件实例创建完成，属性已经绑定，但是Dom还未生成，$el属性还不存在</p>
<p>在生命周期函数中得到左侧的菜单数据；</p>
<h5 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  component: Home,</span><br><span class="line"></span><br><span class="line">  redirect: <span class="string">&#x27;/welcome&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  children: [</span><br><span class="line"></span><br><span class="line">   &#123; <span class="attr">path</span>: <span class="string">&#x27;/welcome&#x27;</span>, <span class="attr">component</span>: Welcome &#125;]</span><br></pre></td></tr></table></figure>
<p>在到达/home后重定向到/welcome,在welcome是欢迎页面组件，在组件中嵌套组件；在el-main中放置router-view局部更新；</p>
<h5 id="新加用户列表"><a href="#新加用户列表" class="headerlink" title="新加用户列表"></a>新加用户列表</h5><ol>
<li>初始化user.vue组件，包括结构样式和行为</li>
</ol>
<p>​     结构：template 样式： style 注意加scope 行为:  script</p>
<ol start="2">
<li>在router.js中导入组件，然后配置路由规则（在home组件内部嵌套使用用户列表组件），在home的children属性中加入路由规则；</li>
</ol>
<h5 id="用户列表的高亮显示"><a href="#用户列表的高亮显示" class="headerlink" title="用户列表的高亮显示"></a>用户列表的高亮显示</h5><ul>
<li><p>在点击菜单的时候在sessionStroge中保存链接的值，并给菜单属性default-active动态绑定值activePath。</p>
</li>
<li><p>在生命周期created函数中改变activePath;</p>
</li>
</ul>
<h5 id="使用作用域插槽渲染操作列！！！！！！！！！！！！！！！！！"><a href="#使用作用域插槽渲染操作列！！！！！！！！！！！！！！！！！" class="headerlink" title="使用作用域插槽渲染操作列！！！！！！！！！！！！！！！！！"></a>使用作用域插槽渲染操作列！！！！！！！！！！！！！！！！！</h5><ul>
<li>slot-scope拿到当前行的数据</li>
<li>作用域插槽就是父组件在调用子组件的时候给子组件传了一个插槽，这个插槽为作用域插槽，该插槽必须放在template标签里面，在作用域插槽内，父组件可以拿到子组件的数据。</li>
<li>作用域插槽是子组件可以在slot标签上绑定属性值，在父组件可以拿到子组件的数据 slot-scope:”scope”,scope.[在子组件上绑定的属性值]，通过子组件绑定数据传递给父组件。</li>
</ul>
<h5 id="组件传值！！！！！！！！！！！！！！！！！！！！"><a href="#组件传值！！！！！！！！！！！！！！！！！！！！" class="headerlink" title="组件传值！！！！！！！！！！！！！！！！！！！！"></a>组件传值！！！！！！！！！！！！！！！！！！！！</h5><ul>
<li><p>父组件给子组件传值：</p>
<p>父组件 在调用子组件的时候直接对子组件进行属性绑定，这样子组件通过props便可以拿到父组件的值；</p>
</li>
<li><p>子组件给父组件传值：</p>
</li>
</ul>
<p>子组件给父组件通过绑定事件给父组件发送一个方法和数据$emit(‘方法名’,子组件中的数据)</p>
<p>父组件监测子组件传递过来的方法，监听到后调用自己的方法，自己的方法里面放着的就是子组件传递过来的值；</p>
<ul>
<li>兄弟组件传值：vue一个新的实例bus.js，类似于一个站，连接着两个组件 Bus.js</li>
</ul>
<p>第一个兄弟组件中：子组件往父组件传值一样；通过事件触发函数发送事件和值,区别是第一个用this.调用emit，但是兄弟组件是给Bus发送Bus.$emit(“自定义事件名”,值)</p>
<p>第二个兄弟组件中：设置公共组件监听子组件传递过来的方法，一旦触发，则调运兄弟自己的方法，自己方法里的参数为兄弟组件传递过来的,与第一个的区别是，通过Bus.$on(“兄弟组件传递过来的函数”,第二个组件的方法（兄弟组件传递过来的值））；</p>
<h5 id="父组件调用子组件的方法"><a href="#父组件调用子组件的方法" class="headerlink" title="父组件调用子组件的方法"></a>父组件调用子组件的方法</h5><p>$refs</p>
<h5 id="角色下权限的渲染！！！！！！！！！！！！！！！问题？父组件给子组件传入值，父组件再通过slot-scope拿到值，为什么要多此一举。"><a href="#角色下权限的渲染！！！！！！！！！！！！！！！问题？父组件给子组件传入值，父组件再通过slot-scope拿到值，为什么要多此一举。" class="headerlink" title="角色下权限的渲染！！！！！！！！！！！！！！！问题？父组件给子组件传入值，父组件再通过slot-scope拿到值，为什么要多此一举。"></a>角色下权限的渲染！！！！！！！！！！！！！！！问题？父组件给子组件传入值，父组件再通过slot-scope拿到值，为什么要多此一举。</h5><ul>
<li><p>采用作用域插槽拿到子组件中的数据，</p>
</li>
<li><p>三重v-for循环拿到</p>
</li>
<li><p>点击删除后不要合上权限列表，直接给role.children赋值，这里的role就是solt-scope里的scope.row；</p>
</li>
</ul>
<h5 id="按钮与文本框的切换显示"><a href="#按钮与文本框的切换显示" class="headerlink" title="按钮与文本框的切换显示"></a>按钮与文本框的切换显示</h5><ul>
<li>v-if 和 else 实现切换效果</li>
<li>点击按钮后触发事件改变v-if绑定的值</li>
</ul>
<h5 id="点击添加商品后通过编程式导航跳转到商品详情页"><a href="#点击添加商品后通过编程式导航跳转到商品详情页" class="headerlink" title="点击添加商品后通过编程式导航跳转到商品详情页"></a>点击添加商品后通过编程式导航跳转到商品详情页</h5><ul>
<li>this.$router.push(“/info”)</li>
</ul>
<h5 id="项目的优化"><a href="#项目的优化" class="headerlink" title="项目的优化"></a>项目的优化</h5><p>经过项目的优化，项目由原来的27.8MB降低至5.5MB，速度有31.79s下降至6.36s,效果显著。</p>
<p><img src="https://img-blog.csdnimg.cn/20210314211450401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mzg4NDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/2021031421192792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mzg4NDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li><p>在执行build命令期间，移除所有的console.log()</p>
<ul>
<li><p>引入transform-remove-console插件</p>
</li>
<li><p>只在product阶段移除(在babel.config.js中加入)：</p>
</li>
<li><pre><code class="javascript">const prodPlugins = []
if (const prodPlugins: any[] &#39;production&#39;)&#123;
    prodPlugins.push(&quot;transform-remove-console&quot;)
&#125;
在plugins选项中加入 ...prodPlugins 数组展开运算符
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">- 在vue.config.js通过chainWebpack(链式编程)自定义打包入口</span><br><span class="line"></span><br><span class="line">  - 为开发模式和发布模式指定不同的打包入口文件</span><br><span class="line"></span><br><span class="line">    &#96;&#96;&#96;javascript</span><br><span class="line">    chainWebpack: config &#x3D;&gt; &#123;</span><br><span class="line">    	config.when(process.env.NODE_ENV&#x3D;&#x3D;&#x3D;&#39;production&#39;,config&#x3D;&gt;&#123;</span><br><span class="line">    		config.entry(&#39;app&#39;).clear().add(&#39;.&#x2F;src&#x2F;main-prod.js&#39;)</span><br><span class="line">    	&#125;)</span><br><span class="line">    	config.when(process.env.NODE_ENV&#x3D;&#x3D;&#x3D;&#39;development&#39;,config&#x3D;&gt;&#123;</span><br><span class="line">    		config.entry(&#39;app&#39;).clear().add(&#39;.&#x2F;src&#x2F;main-dev.js&#39;)</span><br><span class="line">    	&#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
<li><p>通过externals加载外部CDN</p>
<ul>
<li>在打包期间先检查externals里面的一些第三方的依赖包,如果有的话就不会导入，而是去window全局查找；</li>
<li>删除在main-prod.js中import 的包，在index中引入外部CDN</li>
</ul>
</li>
<li><p>实现路由懒加载</p>
<ul>
<li><p>把不同的路由对应的组件分割成不同的代码块，当路由被访问时，才加载对应的组件。</p>
<ol>
<li><p>安装@babel/plugin-syntax-dynamic-import包</p>
</li>
<li><p>在babel.config.js配置文件中声明该插件</p>
</li>
<li><p>将路由改为按需加载，分组请求（login_home_welcome）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const Login &#x3D; () &#x3D;&gt; import(&#x2F;* webpackChunkName: &#39;login_home_welcome&#39; *&#x2F; &#39;..&#x2F;components&#x2F;Login.vue&#39;)</span><br><span class="line">const Home &#x3D; () &#x3D;&gt; import(&#x2F;* webpackChunkName: &#39;login_home_welcome&#39; *&#x2F; &#39;..&#x2F;components&#x2F;Home.vue&#39;)</span><br><span class="line">const Welcome &#x3D; () &#x3D;&gt; import(&#x2F;* webpackChunkName: &#39;login_home_welcome&#39; *&#x2F; &#39;..&#x2F;components&#x2F;Welcome.vue&#39;)</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ul>
</li>
<li><p>开启文件的Gzip网络压缩传输</p>
<ul>
<li>服务器导入compression包</li>
<li>新增中间件 app.use(compression())</li>
</ul>
</li>
<li><p>使用pm2管理服务器上的两个应用</p>
<ul>
<li>pm2 start 脚本 –name 自定义名称</li>
<li>pm2 ls :查看运行项目</li>
<li>pm2 restart 自定义名称</li>
<li>pm2 stop 自定义名称</li>
</ul>
</li>
</ul>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>1.使用Element-UI的Form组件是$ref拿不到表单的值，原因：在将ref加到了el-form-item上，el-form-item只是表单的每一项。</p>
<p>2.el-menu菜单中最左边的下拉图标不显示，原因：我使用的阿里的图标，太大，把el-icon挤出去了；</p>
<p>3.菜单项没有高亮效果，</p>
<p>遇到的困难主要是部署服务器的期间，由于对项目中，数据库上传端口、后端接口中app.js监听的端口和自己项目的app.js的端口没有区分清楚，安装了过多软件，最终导致服务器宕机，重新思索后解决了问题。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue组件学习</title>
    <url>/2020/11/15/Vue%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><a id="more"></a>

<ul>
<li>组件 (Component) 是 Vue.js 最强大的功能之一</li>
<li>组件可以扩展 HTML 元素，封装可重用的代</li>
</ul>
<h3 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h3><h4 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h4><ul>
<li>Vue.component(‘组件名称’, { })     第1个参数是标签名称，第2个参数是一个选项对象</li>
<li><strong>全局组件</strong>注册后，任何<strong>vue实例</strong>都可以用</li>
</ul>
<h5 id="组件基础用"><a href="#组件基础用" class="headerlink" title="组件基础用"></a>组件基础用</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 2、 组件使用 组件名称 是以HTML标签的形式使用  --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//   注册组件 </span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1、 my-component 就是组件中自定义的标签名</span></span></span><br><span class="line"><span class="javascript">	Vue.component(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">      template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>A custom component!<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#example&#x27;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="组件注意事项"><a href="#组件注意事项" class="headerlink" title="组件注意事项"></a>组件注意事项</h5><ul>
<li>组件参数的data值必须是函数同时这个函数要求返回一个对象 </li>
<li>组件模板必须是单个根元素</li>
<li>组件模板的内容可以是模板字符串</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		4、  组件可以重复使用多次 </span></span><br><span class="line"><span class="comment">	      因为data中返回的是一个对象所以每个组件中的数据是私有的</span></span><br><span class="line"><span class="comment">		  即每个实例可以维护一份被返回对象的独立的拷贝   </span></span><br><span class="line"><span class="comment">	--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 8、必须使用短横线的方式使用组件 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">hello-world</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-world</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="comment">//5  如果使用驼峰式命名组件，那么在使用组件的时候，只能在字符串模板中用驼峰的方式使用组件，</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 7、但是在普通的标签模板中，必须使用短横线的方式使用组件</span></span></span><br><span class="line"><span class="javascript">     Vue.component(<span class="string">&#x27;HelloWorld&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">      data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          msg: <span class="string">&#x27;HelloWorld&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="handlebars"><span class="xml">      template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">msg</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;button-counter&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 1、组件参数的data值必须是函数 </span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 同时这个函数要求返回一个对象  </span></span></span><br><span class="line"><span class="javascript">      data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">          count: 0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="comment">//  2、组件模板必须是单个根元素</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//  3、组件模板的内容可以是模板字符串  </span></span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handle&quot;</span>&gt;</span>点击了</span><span class="template-variable">&#123;&#123;<span class="name">count</span>&#125;&#125;</span><span class="xml">次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">button</span>&gt;</span>测试123<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line">			#  6 在字符串模板中可以使用驼峰的方式使用组件	</span><br><span class="line"><span class="handlebars"><span class="xml">		   <span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">      `,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        handle: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.count += <span class="number">2</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h4><ul>
<li>只能在当前注册它的vue实例中使用</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义组件的模板</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> Child = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">      template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>A custom component!<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//局部注册组件  </span></span></span><br><span class="line">      components: &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// &lt;my-component&gt; 将只在父模板可用  一定要在实例上注册了才能在html文件中使用</span></span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;my-component&#x27;</span>: Child</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="Vue-调试工具"><a href="#Vue-调试工具" class="headerlink" title="Vue 调试工具"></a>Vue 调试工具</h3><h3 id="Vue组件之间传值"><a href="#Vue组件之间传值" class="headerlink" title="Vue组件之间传值"></a>Vue组件之间传值</h3><h4 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h4><ul>
<li>父组件发送的形式是以属性的形式绑定值到子组件身上。</li>
<li>然后子组件用属性props接收</li>
<li> 在props中使用驼峰形式，模板中需要使用短横线的形式字符串形式的模板中没有这个限制</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;pmsg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1、menu-item  在 APP中嵌套着 故 menu-item   为  子组件      --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给子组件传入一个静态的值 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">title</span>=<span class="string">&#x27;来自父组件的值&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 2、 需要动态的数据的时候 需要属性绑定的形式设置 此时 ptitle  来自父组件data 中的数据 . </span></span><br><span class="line"><span class="comment">	  传的值可以是数字、对象、数组等等</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">:title</span>=<span class="string">&#x27;ptitle&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;hello&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">   Vue.component(<span class="string">&#x27;menu-item&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">     <span class="comment">// 3、 子组件用属性props接收父组件传递过来的数据  </span></span></span><br><span class="line"><span class="javascript">     props: [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;content&#x27;</span>],</span></span><br><span class="line"><span class="javascript">     data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">         msg: <span class="string">&#x27;子组件本身的数据&#x27;</span></span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line"><span class="handlebars"><span class="xml">     template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">msg</span> + <span class="string">&quot;----&quot;</span> + title + <span class="string">&quot;-----&quot;</span> + content&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">   &#125;);</span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">     el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line"><span class="javascript">       pmsg: <span class="string">&#x27;父组件中内容&#x27;</span>,</span></span><br><span class="line"><span class="javascript">       ptitle: <span class="string">&#x27;动态绑定属性&#x27;</span></span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h4><ul>
<li>子组件用<code>$emit()</code>触发事件</li>
<li><code>$emit()</code>  第一个参数为 自定义的事件名称     第二个参数为需要传递的数据</li>
<li>父组件用v-on 监听子组件的事件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&#x27;&#123;fontSize: fontSize + &quot;px&quot;&#125;&#x27;</span>&gt;</span>&#123;&#123;pmsg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2 父组件用v-on 监听子组件的事件</span></span><br><span class="line"><span class="comment">	这里 enlarge-text  是从 $emit 中的第一个参数对应   handle 为对应的事件处理函数	</span></span><br><span class="line"><span class="comment">--&gt;</span>	</span><br><span class="line">   <span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">:parr</span>=<span class="string">&#x27;parr&#x27;</span> @<span class="attr">enlarge-text</span>=<span class="string">&#x27;handle($event)&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">   /*</span><br><span class="line">     子组件向父组件传值-携带参数</span><br><span class="line">   */</span><br><span class="line">   </span><br><span class="line"><span class="javascript">   Vue.component(<span class="string">&#x27;menu-item&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">     props: [<span class="string">&#x27;parr&#x27;</span>],</span></span><br><span class="line">     template: `</span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">           <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">&#x27;index&#x27;</span> <span class="attr">v-for</span>=<span class="string">&#x27;(item,index) in parr&#x27;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">		###  1、子组件用$emit()触发事件</span><br><span class="line">		### 第一个参数为 自定义的事件名称   第二个参数为需要传递的数据  </span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;$emit(&quot;enlarge-text&quot;, 5)&#x27;</span>&gt;</span>扩大父组件中字体大小<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;$emit(&quot;enlarge-text&quot;, 10)&#x27;</span>&gt;</span>扩大父组件中字体大小<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">     `</span><br><span class="line">   &#125;);</span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">     el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line"><span class="javascript">       pmsg: <span class="string">&#x27;父组件中内容&#x27;</span>,</span></span><br><span class="line"><span class="javascript">       parr: [<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;banana&#x27;</span>],</span></span><br><span class="line">       fontSize: 10</span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line"><span class="javascript">       handle: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="comment">// 扩大字体大小</span></span></span><br><span class="line"><span class="javascript">         <span class="built_in">this</span>.fontSize += val;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="兄弟之间的传递"><a href="#兄弟之间的传递" class="headerlink" title="兄弟之间的传递"></a>兄弟之间的传递</h4><ul>
<li>兄弟之间传递数据需要借助于事件中心，通过事件中心传递数据   <ul>
<li>提供事件中心    var hub = new Vue()</li>
</ul>
</li>
<li>传递数据方，通过一个事件触发hub.$emit(方法名，传递的数据)</li>
<li>接收数据方，通过mounted(){} 钩子中  触发hub.$on()方法名</li>
<li>销毁事件 通过hub.$off()方法名销毁之后无法进行传递数据</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;handle&#x27;</span>&gt;</span>销毁事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">test-tom</span>&gt;</span><span class="tag">&lt;/<span class="name">test-tom</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">test-jerry</span>&gt;</span><span class="tag">&lt;/<span class="name">test-jerry</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">   /*</span><br><span class="line">     兄弟组件之间数据传递</span><br><span class="line">   */</span><br><span class="line"><span class="javascript">   <span class="comment">//1、 提供事件中心</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> hub = <span class="keyword">new</span> Vue();</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   Vue.component(<span class="string">&#x27;test-tom&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">     data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">return</span> &#123;</span></span><br><span class="line">         num: 0</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     template: `</span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">div</span>&gt;</span>TOM:</span><span class="template-variable">&#123;&#123;<span class="name">num</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">           <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;handle&#x27;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">     `,</span><br><span class="line">     methods: &#123;</span><br><span class="line"><span class="javascript">       handle: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="comment">//2、传递数据方，通过一个事件触发hub.$emit(方法名，传递的数据)   触发兄弟组件的事件</span></span></span><br><span class="line"><span class="javascript">         hub.$emit(<span class="string">&#x27;jerry-event&#x27;</span>, <span class="number">2</span>);</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line"><span class="javascript">     mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 3、接收数据方，通过mounted()&#123;&#125; 钩子中  触发hub.$on(方法名</span></span></span><br><span class="line"><span class="javascript">       hub.$on(<span class="string">&#x27;tom-event&#x27;</span>, <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">         <span class="built_in">this</span>.num += val;</span></span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"><span class="javascript">   Vue.component(<span class="string">&#x27;test-jerry&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">     data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">return</span> &#123;</span></span><br><span class="line">         num: 0</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     template: `</span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">div</span>&gt;</span>JERRY:</span><span class="template-variable">&#123;&#123;<span class="name">num</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">           <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;handle&#x27;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">     `,</span><br><span class="line">     methods: &#123;</span><br><span class="line"><span class="javascript">       handle: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="comment">//2、传递数据方，通过一个事件触发hub.$emit(方法名，传递的数据)   触发兄弟组件的事件</span></span></span><br><span class="line"><span class="javascript">         hub.$emit(<span class="string">&#x27;tom-event&#x27;</span>, <span class="number">1</span>);</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line"><span class="javascript">     mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="comment">// 3、接收数据方，通过mounted()&#123;&#125; 钩子中  触发hub.$on()方法名</span></span></span><br><span class="line"><span class="javascript">       hub.$on(<span class="string">&#x27;jerry-event&#x27;</span>, <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">         <span class="built_in">this</span>.num += val;</span></span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">     el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line">       </span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line"><span class="javascript">       handle: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="comment">//4、销毁事件 通过hub.$off()方法名销毁之后无法进行传递数据  </span></span></span><br><span class="line"><span class="javascript">         hub.$off(<span class="string">&#x27;tom-event&#x27;</span>);</span></span><br><span class="line"><span class="javascript">         hub.$off(<span class="string">&#x27;jerry-event&#x27;</span>);</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h3><ul>
<li>组件的最大特性就是复用性，而用好插槽能大大提高组件的可复用能力</li>
</ul>
<h4 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里的所有组件标签中嵌套的内容会替换掉slot  如果不传值 则使用 slot 中的默认值  --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">alert-box</span>&gt;</span>有bug发生<span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alert-box</span>&gt;</span>有一个警告<span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alert-box</span>&gt;</span><span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">      组件插槽：父组件向子组件传递内容</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;alert-box&#x27;</span>, &#123;</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">strong</span>&gt;</span>ERROR:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">		# 当组件渲染的时候，这个 <span class="tag">&lt;<span class="name">slot</span>&gt;</span> 元素将会被替换为“组件标签中嵌套的内容”。</span></span></span><br><span class="line">		# 插槽内可以包含任何模板代码，包括 HTML</span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">slot</span>&gt;</span>默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><ul>
<li>具有名字的插槽 </li>
<li>使用 <slot> 中的 “name” 属性绑定元素</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 2、 通过slot属性来指定, 这个slot的值必须和下面slot组件得name值对应上</span></span><br><span class="line"><span class="comment">				如果没有匹配到 则放到匿名的插槽中   --&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span>标题信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span>底部信息信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 注意点：template临时的包裹标签最终不会渲染到页面上     --&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>标题信息1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>标题信息2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>底部信息信息1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>底部信息信息2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">      具名插槽</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;base-layout&#x27;</span>, &#123;</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">			###	1、 使用 <span class="tag">&lt;<span class="name">slot</span>&gt;</span> 中的 &quot;name&quot; 属性绑定元素 指定当前插槽的名字</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line">			###  注意点： </span><br><span class="line">			###  具名插槽的渲染顺序，完全取决于模板，而不是取决于父组件中元素的顺序</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><ul>
<li>父组件对子组件加工处理</li>
<li>既可以复用子组件的slot，又可以使slot内容不一致</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		1、当我们希望li 的样式由外部使用组件的地方定义，因为可能有多种地方要使用该组件，</span></span><br><span class="line"><span class="comment">		但样式希望不一样 这个时候我们需要使用作用域插槽 </span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">	--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">fruit-list</span> <span class="attr">:list</span>=<span class="string">&#x27;list&#x27;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 2、 父组件中使用了&lt;template&gt;元素,而且包含scope=&quot;slotProps&quot;,</span></span><br><span class="line"><span class="comment">			slotProps在这里只是临时变量   </span></span><br><span class="line"><span class="comment">		---&gt;</span> 	</span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&#x27;slotProps&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span> <span class="attr">v-if</span>=<span class="string">&#x27;slotProps.info.id==3&#x27;</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;slotProps.info.name&#125;&#125;		         </span><br><span class="line">         <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123;slotProps.info.name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fruit-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">      作用域插槽</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;fruit-list&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">      props: [<span class="string">&#x27;list&#x27;</span>],</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">          &lt;li :key=<span class="string">&#x27;item.id&#x27;</span> v-<span class="keyword">for</span>=<span class="string">&#x27;item in list&#x27;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">			###  3、 在子组件模板中,<span class="tag">&lt;<span class="name">slot</span>&gt;</span>元素上有一个类似props传递数据给组件的写法msg=&quot;xxx&quot;,</span></span></span><br><span class="line">			###   插槽可以提供一个默认内容，如果如果父组件没有为这个插槽提供了内容，会显示默认的内容。</span><br><span class="line">					如果父组件为这个插槽提供了内容，则默认的内容会被替换掉</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:info</span>=<span class="string">&#x27;item&#x27;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        list: [&#123;</span><br><span class="line">          id: 1,</span><br><span class="line"><span class="javascript">          name: <span class="string">&#x27;apple&#x27;</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          id: 2,</span><br><span class="line"><span class="javascript">          name: <span class="string">&#x27;orange&#x27;</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          id: 3,</span><br><span class="line"><span class="javascript">          name: <span class="string">&#x27;banana&#x27;</span></span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Webapi</title>
    <url>/2021/03/01/Webapi/</url>
    <content><![CDATA[<h1 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h1><a id="more"></a>

<blockquote>
<p>能够写出移动端触屏事件<br>能够写出常见的移动端特效<br>能够使用移动端开发插件开发移动端特效<br>能够使用移动端开发框架开发移动端特效<br>能够写出 sessionStorage 数据的存储以及获取<br>能够写出 localStorage 数据的存储以及获取<br>能够说出它们两者的区别</p>
</blockquote>
<h2 id="1-1-触屏事件"><a href="#1-1-触屏事件" class="headerlink" title="1.1. 触屏事件"></a><strong>1.1. 触屏事件</strong></h2><h3 id="1-1-1-触屏事件概述"><a href="#1-1-1-触屏事件概述" class="headerlink" title="1.1.1 触屏事件概述"></a>1.1.1 触屏事件概述</h3><p>移动端浏览器兼容性较好，我们不需要考虑以前 JS 的兼容性问题，可以放心的使用原生 JS 书写效果，但是移动端也有自己独特的地方。比如触屏事件 touch（也称触摸事件），Android 和 IOS 都有。touch 对象代表一个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。触屏事件可响应用户手指（或触控笔）对屏幕或者触控板操作。</p>
<p>常见的触屏事件如下：</p>
<p>![图片1](C:\Users\kevin\Desktop\前端\07-10 JavaScript网页编程\02-WebAPI编程资料\Web APIs-day07\4-笔记\images\图片1.png)</p>
<h3 id="1-1-2-触摸事件对象（TouchEvent）"><a href="#1-1-2-触摸事件对象（TouchEvent）" class="headerlink" title="1.1.2 触摸事件对象（TouchEvent）"></a>1.1.2 触摸事件对象（TouchEvent）</h3><p>TouchEvent 是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件。这类事件用于描述一个或多个触点，使开发者可以检测触点的移动，触点的增加和减少，等等</p>
<p>touchstart、touchmove、touchend 三个事件都会各自有事件对象。</p>
<p>触摸事件对象重点我们看三个常见对象列表：</p>
<p>![图片2](C:\Users\kevin\Desktop\前端\07-10 JavaScript网页编程\02-WebAPI编程资料\Web APIs-day07\4-笔记\images\图片2.png)</p>
<blockquote>
<p><strong>因为平时我们都是给元素注册触摸事件，所以重点记住 targetTocuhes</strong></p>
</blockquote>
<h3 id="1-1-3-移动端拖动元素"><a href="#1-1-3-移动端拖动元素" class="headerlink" title="1.1.3  移动端拖动元素"></a>1.1.3  移动端拖动元素</h3><ol>
<li> touchstart、touchmove、touchend 可以实现拖动元素</li>
<li> 但是拖动元素需要当前手指的坐标值 我们可以使用  targetTouches[0] 里面的pageX 和 pageY </li>
<li> 移动端拖动的原理：    手指移动中，计算出手指移动的距离。然后用盒子原来的位置 + 手指移动的距离</li>
<li> 手指移动的距离：  手指滑动中的位置 减去  手指刚开始触摸的位置</li>
</ol>
<p>拖动元素三步曲：</p>
<p>（1） 触摸元素 touchstart： 获取手指初始坐标，同时获得盒子原来的位置</p>
<p>（2） 移动手指 touchmove： 计算手指的滑动距离，并且移动盒子</p>
<p>（3） 离开手指 touchend:</p>
<blockquote>
<p><strong>注意： 手指移动也会触发滚动屏幕所以这里要阻止默认的屏幕滚动 e.preventDefault();</strong></p>
</blockquote>
<h2 id="1-2-移动端常见特效"><a href="#1-2-移动端常见特效" class="headerlink" title="1.2. 移动端常见特效"></a>1.2. 移动端常见特效</h2><h3 id="1-2-1-案例-移动轮播图"><a href="#1-2-1-案例-移动轮播图" class="headerlink" title="1.2.1 案例: 移动轮播图"></a>1.2.1 案例: 移动轮播图</h3><p><code>移动端轮播图功能和基本PC端一致。</code></p>
<ol>
<li>可以自动播放图片</li>
<li>手指可以拖动播放轮播图</li>
</ol>
<h3 id="1-2-2-案例分析"><a href="#1-2-2-案例分析" class="headerlink" title="1.2.2. 案例分析:"></a>1.2.2. 案例分析:</h3><ol>
<li>自动播放功能</li>
<li>开启定时器</li>
<li>移动端移动，可以使用translate 移动</li>
<li>想要图片优雅的移动，请添加过渡效果<img src="images%5C1551795152(1).jpg" alt="1551795152(C:\Users\kevin\Desktop\前端\07-10 JavaScript网页编程\02-WebAPI编程资料\Web APIs-day07\4-笔记\images\1551795152(1).jpg)"></li>
</ol>
<ol>
<li><p>自动播放功能-无缝滚动</p>
</li>
<li><p>注意，我们判断条件是要等到图片滚动完毕再去判断，就是过渡完成后判断</p>
</li>
<li><p>此时需要添加检测过渡完成事件  transitionend </p>
</li>
<li><p>判断条件：如果索引号等于 3 说明走到最后一张图片，此时 索引号要复原为 0</p>
</li>
<li><p>此时图片，去掉过渡效果，然后移动</p>
</li>
<li><p>如果索引号小于0， 说明是倒着走， 索引号等于2 </p>
</li>
<li><p>此时图片，去掉过渡效果，然后移动</p>
<p><img src="images%5C1551795483(1).jpg" alt="1551795483(C:\Users\kevin\Desktop\前端\07-10 JavaScript网页编程\02-WebAPI编程资料\Web APIs-day07\4-笔记\images\1551795483(1).jpg)"></p>
</li>
</ol>
<h2 id="1-2-3-classList-属性"><a href="#1-2-3-classList-属性" class="headerlink" title="1.2.3 classList 属性"></a>1.2.3 classList 属性</h2><p>classList属性是HTML5新增的一个属性，返回元素的类名。但是ie10以上版本支持。</p>
<p>该属性用于在元素中添加，移除及切换 CSS 类。有以下方法</p>
<p><strong>添加类：</strong></p>
<p>element.classList.add（’类名’）；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">focus.classList.add(<span class="string">&#x27;current&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>移除类：</strong></p>
<p>element.classList.remove（’类名’）;</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">focus.classList.remove(<span class="string">&#x27;current&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>切换类：</strong></p>
<p>element.classList.toggle（’类名’）;</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">focus.classList.toggle(<span class="string">&#x27;current&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><code>注意:以上方法里面，所有类名都不带点</code></p>
<h3 id="1-2-4-案例分析"><a href="#1-2-4-案例分析" class="headerlink" title="1.2.4. 案例分析"></a>1.2.4. 案例分析</h3><ol>
<li><p>小圆点跟随变化效果</p>
</li>
<li><p>把ol里面li带有current类名的选出来去掉类名 remove</p>
</li>
<li><p>让当前索引号的小li 加上 current   add</p>
</li>
<li><p>但是，是等着过渡结束之后变化，所以这个写到 transitionend 事件里面</p>
<p><img src="images%5C1551796072(1).jpg" alt="1551796072(C:\Users\kevin\Desktop\前端\07-10 JavaScript网页编程\02-WebAPI编程资料\Web APIs-day07\4-笔记\images\1551796072(1).jpg)"></p>
</li>
</ol>
<ol>
<li>手指滑动轮播图</li>
<li>本质就是ul跟随手指移动，简单说就是移动端拖动元素</li>
<li>触摸元素touchstart：  获取手指初始坐标</li>
<li>移动手指touchmove：  计算手指的滑动距离，并且移动盒子</li>
<li>离开手指touchend:   根据滑动的距离分不同的情况</li>
<li>如果移动距离小于某个像素  就回弹原来位置</li>
<li>如果移动距离大于某个像素就上一张下一张滑动。</li>
<li>滑动也分为左滑动和右滑动判断的标准是 移动距离正负 如果是负值就是左滑 反之右滑 </li>
<li>如果是左滑就播放下一张 （index++）</li>
<li>如果是右滑就播放上一张  (index–)</li>
</ol>
<p><img src="images%5C1551796363(1).jpg" alt="1551796363(C:\Users\kevin\Desktop\前端\07-10 JavaScript网页编程\02-WebAPI编程资料\Web APIs-day07\4-笔记\images\1551796363(1).jpg)"></p>
<p><img src="images%5C1551796502(1).jpg" alt="1551796502(C:\Users\kevin\Desktop\前端\07-10 JavaScript网页编程\02-WebAPI编程资料\Web APIs-day07\4-笔记\images\1551796502(1).jpg)"></p>
<h3 id="1-3-1-案例：返回顶部"><a href="#1-3-1-案例：返回顶部" class="headerlink" title="1.3.1. 案例：返回顶部"></a>1.3.1. 案例：返回顶部</h3><p>当页面滚动某个地方，就显示，否则隐藏</p>
<p>点击可以返回顶部</p>
<h3 id="1-3-2-案例分析"><a href="#1-3-2-案例分析" class="headerlink" title="1.3.2.案例分析"></a>1.3.2.案例分析</h3><ol>
<li>滚动某个地方显示</li>
<li>事件：scroll页面滚动事件  </li>
<li>如果被卷去的头部（window.pageYOffset ）大于某个数值</li>
<li>点击，window.scroll(0,0) 返回顶部</li>
</ol>
<p><img src="images%5C1551797003(1).jpg" alt="1551797003(C:\Users\kevin\Desktop\前端\07-10 JavaScript网页编程\02-WebAPI编程资料\Web APIs-day07\4-笔记\images\1551797003(1).jpg)"></p>
<h2 id="1-4-click-延时解决方案"><a href="#1-4-click-延时解决方案" class="headerlink" title="1.4. click 延时解决方案"></a>1.4. click 延时解决方案</h2><p>移动端 click 事件会有 300ms 的延时，原因是移动端屏幕双击会缩放(double tap to zoom) 页面。</p>
<p>解决方案：</p>
<p>​    1. 禁用缩放。 浏览器禁用默认的双击缩放行为并且去掉300ms 的点击延迟。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;user-scalable=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>​    2.利用touch事件自己封装这个事件解决300ms 延迟。 </p>
<p>​    原理就是：</p>
<ol>
<li> 当我们手指触摸屏幕，记录当前触摸时间</li>
<li> 当我们手指离开屏幕， 用离开的时间减去触摸的时间</li>
<li> 如果时间小于150ms，并且没有滑动过屏幕， 那么我们就定义为点击</li>
</ol>
<p>代码如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装tap，解决click 300ms 延时</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tap</span> (<span class="params">obj, callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> isMove = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> startTime = <span class="number">0</span>; <span class="comment">// 记录触摸时候的时间变量</span></span><br><span class="line">        obj.addEventListener(<span class="string">&#x27;touchstart&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            startTime = <span class="built_in">Date</span>.now(); <span class="comment">// 记录触摸时间</span></span><br><span class="line">        &#125;);</span><br><span class="line">        obj.addEventListener(<span class="string">&#x27;touchmove&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            isMove = <span class="literal">true</span>;  <span class="comment">// 看看是否有滑动，有滑动算拖拽，不算点击</span></span><br><span class="line">        &#125;);</span><br><span class="line">        obj.addEventListener(<span class="string">&#x27;touchend&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!isMove &amp;&amp; (<span class="built_in">Date</span>.now() - startTime) &lt; <span class="number">150</span>) &#123;  <span class="comment">// 如果手指触摸和离开时间小于150ms 算点击</span></span><br><span class="line">                callback &amp;&amp; callback(); <span class="comment">// 执行回调函数</span></span><br><span class="line">            &#125;</span><br><span class="line">            isMove = <span class="literal">false</span>;  <span class="comment">//  取反 重置</span></span><br><span class="line">            startTime = <span class="number">0</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用  </span></span><br><span class="line">  tap(div, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   <span class="comment">// 执行代码  &#125;);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="3">
<li><p>使用插件。fastclick 插件解决300ms 延迟。 </p>
<p><img src="images%5C1551797533(1).jpg" alt="1551797533(C:\Users\kevin\Desktop\前端\07-10 JavaScript网页编程\02-WebAPI编程资料\Web APIs-day07\4-笔记\images\1551797533(1).jpg)"></p>
</li>
</ol>
<h2 id="1-5-移动端常用开发插件"><a href="#1-5-移动端常用开发插件" class="headerlink" title="1.5. 移动端常用开发插件"></a>1.5. 移动端常用开发插件</h2><h3 id="1-5-1-什么是插件"><a href="#1-5-1-什么是插件" class="headerlink" title="1.5.1. 什么是插件"></a>1.5.1. 什么是插件</h3><p>移动端要求的是快速开发，所以我们经常会借助于一些插件来帮我完成操作，那么什么是插件呢？</p>
<p>JS 插件是 js 文件，它遵循一定规范编写，方便程序展示效果，拥有特定功能且方便调用。如轮播图和瀑布流插件。</p>
<p>特点：它一般是为了解决某个问题而专门存在，其功能单一，并且比较小。</p>
<p>我们以前写的animate.js 也算一个最简单的插件</p>
<p>fastclick 插件解决 300ms 延迟。 使用延时</p>
<p>GitHub官网地址： <a href="https://github.com/ftlabs/fastclick">https://</a><a href="https://github.com/ftlabs/fastclick">github.com/ftlabs/fastclick</a></p>
<h3 id="1-5-2-插件的使用"><a href="#1-5-2-插件的使用" class="headerlink" title="1.5.2. 插件的使用"></a>1.5.2. 插件的使用</h3><ol>
<li><p>引入 js 插件文件。</p>
</li>
<li><p>按照规定语法使用。</p>
</li>
<li><p>fastclick 插件解决 300ms 延迟。 使用延时</p>
</li>
<li><p>GitHub官网地址： <a href="https://github.com/ftlabs/fastclick">https://github.com/ftlabs/fastclick</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;addEventListener&#x27;</span> <span class="keyword">in</span> <span class="built_in">document</span>) &#123;</span><br><span class="line">            <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                       FastClick.attach(<span class="built_in">document</span>.body);</span><br><span class="line">            &#125;, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-5-3-Swiper-插件的使用"><a href="#1-5-3-Swiper-插件的使用" class="headerlink" title="1.5.3. Swiper 插件的使用"></a>1.5.3. Swiper 插件的使用</h3></li>
</ol>
<p>中文官网地址： <a href="https://www.swiper.com.cn/">https://www.swiper.com.cn/</a> </p>
<ol>
<li> 引入插件相关文件。</li>
<li> 按照规定语法使用</li>
</ol>
<h3 id="1-5-4-其他移动端常见插件"><a href="#1-5-4-其他移动端常见插件" class="headerlink" title="1.5.4. 其他移动端常见插件"></a>1.5.4. 其他移动端常见插件</h3><p>lsuperslide： <a href="http://www.superslide2.com/">http://www.superslide2.com/</a></p>
<p>l iscroll： <a href="https://github.com/cubiq/iscroll">https://github.com/cubiq/iscroll</a></p>
<h3 id="1-5-5-插件的使用总结"><a href="#1-5-5-插件的使用总结" class="headerlink" title="1.5.5. 插件的使用总结"></a>1.5.5. 插件的使用总结</h3><p>1.确认插件实现的功能</p>
<p>2.去官网查看使用说明</p>
<p>3.下载插件</p>
<p>4.打开demo实例文件，查看需要引入的相关文件，并且引入</p>
<p>5.复制demo实例文件中的结构html，样式css以及js代码</p>
<h3 id="1-5-6-移动端视频插件-zy-media-js"><a href="#1-5-6-移动端视频插件-zy-media-js" class="headerlink" title="1.5.6. 移动端视频插件 zy.media.js"></a>1.5.6. 移动端视频插件 zy.media.js</h3><p>H5 给我们提供了 video 标签，但是浏览器的支持情况不同。</p>
<p>不同的视频格式文件，我们可以通过source解决。</p>
<p>但是外观样式，还有暂停，播放，全屏等功能我们只能自己写代码解决。</p>
<p>这个时候我们可以使用插件方式来制作。</p>
<p>我们可以通过 JS 修改元素的大小、颜色、位置等样式。</p>
<h2 id="1-6-移动端常用开发框架"><a href="#1-6-移动端常用开发框架" class="headerlink" title="1.6. 移动端常用开发框架"></a>1.6. 移动端常用开发框架</h2><h3 id="1-6-1-移动端视频插件-zy-media-js"><a href="#1-6-1-移动端视频插件-zy-media-js" class="headerlink" title="1.6.1. 移动端视频插件 zy.media.js"></a>1.6.1. 移动端视频插件 zy.media.js</h3><p>框架，顾名思义就是一套架构，它会基于自身的特点向用户提供一套较为完整的解决方案。框架的控制权在框架本身，使用者要按照框架所规定的某种规范进行开发。</p>
<p>插件一般是为了解决某个问题而专门存在，其功能单一，并且比较小。</p>
<p>前端常用的框架有 Bootstrap、Vue、Angular、React 等。既能开发PC端，也能开发移动端</p>
<p>前端常用的移动端插件有 swiper、superslide、iscroll等。</p>
<p>框架： 大而全，一整套解决方案</p>
<p>插件： 小而专一，某个功能的解决方案</p>
<h3 id="1-6-2-Bootstrap"><a href="#1-6-2-Bootstrap" class="headerlink" title="1.6.2. Bootstrap"></a>1.6.2. Bootstrap</h3><p>Bootstrap 是一个简洁、直观、强悍的前端开发框架，它让 web 开发更迅速、简单。</p>
<p>它能开发PC端，也能开发移动端 </p>
<p>Bootstrap JS插件使用步骤：</p>
<p>1.引入相关js 文件</p>
<p>2.复制HTML 结构</p>
<p>3.修改对应样式</p>
<p>4.修改相应JS 参数</p>
<h2 id="1-7-本地存储"><a href="#1-7-本地存储" class="headerlink" title="1.7. 本地存储"></a>1.7. 本地存储</h2><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，HTML5规范提出了相关解决方案。</p>
<h3 id="1-7-1-本地存储特性"><a href="#1-7-1-本地存储特性" class="headerlink" title="1.7.1.本地存储特性"></a>1.7.1.本地存储特性</h3><p>1、数据存储在用户浏览器中</p>
<p>2、设置、读取方便、甚至页面刷新不丢失数据</p>
<p>3、容量较大，sessionStorage约5M、localStorage约20M</p>
<p>4、只能存储字符串，可以将对象JSON.stringify() 编码后存储</p>
<h3 id="1-7-2-window-sessionStorage"><a href="#1-7-2-window-sessionStorage" class="headerlink" title="1.7.2.window.sessionStorage"></a>1.7.2.window.sessionStorage</h3><p>1、生命周期为关闭浏览器窗口</p>
<p>2、在同一个窗口(页面)下数据可以共享</p>
<p>3、以键值对的形式存储使用</p>
<p>存储数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sessionStorage.setItem(key, value)</span><br></pre></td></tr></table></figure>
<p>获取数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sessionStorage.getItem(key)</span><br></pre></td></tr></table></figure>
<p>删除数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sessionStorage.removeItem(key)</span><br></pre></td></tr></table></figure>
<p>清空数据：(所有都清除掉)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sessionStorage.clear()</span><br></pre></td></tr></table></figure>
<h3 id="1-7-3-window-localStorage"><a href="#1-7-3-window-localStorage" class="headerlink" title="1.7.3.window.localStorage"></a>1.7.3.window.localStorage</h3><p>1、声明周期永久生效，除非手动删除 否则关闭页面也会存在</p>
<p>2、可以多窗口（页面）共享（同一浏览器可以共享）</p>
<p>3.  以键值对的形式存储使用</p>
<p>存储数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.setItem(key, value)</span><br></pre></td></tr></table></figure>
<p>获取数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.getItem(key)</span><br></pre></td></tr></table></figure>
<p>删除数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.removeItem(key)</span><br></pre></td></tr></table></figure>
<p>清空数据：(所有都清除掉)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.clear()</span><br></pre></td></tr></table></figure>
<h3 id="1-7-4-案例：记住用户名"><a href="#1-7-4-案例：记住用户名" class="headerlink" title="1.7.4.案例：记住用户名"></a>1.7.4.案例：记住用户名</h3><p>如果勾选记住用户名， 下次用户打开浏览器，就在文本框里面自动显示上次登录的用户名</p>
<h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><ol>
<li><p>把数据存起来，用到本地存储</p>
</li>
<li><p>关闭页面，也可以显示用户名，所以用到localStorage</p>
</li>
<li><p>打开页面，先判断是否有这个用户名，如果有，就在表单里面显示用户名，并且勾选复选框</p>
</li>
<li><p>当复选框发生改变的时候change事件</p>
</li>
<li><p>如果勾选，就存储，否则就移除</p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>flex布局</title>
    <url>/2021/03/10/flex%E5%B8%83%E5%B1%80-1/</url>
    <content><![CDATA[<h1 id="flex布局（看b站黑马教程收获）"><a href="#flex布局（看b站黑马教程收获）" class="headerlink" title="flex布局（看b站黑马教程收获）"></a>flex布局（看b站黑马教程收获）</h1><a id="more"></a>

<h4 id="布局原理-，当父盒字设为flex布局后，子元素的float、clear、vertical-align属性将失效"><a href="#布局原理-，当父盒字设为flex布局后，子元素的float、clear、vertical-align属性将失效" class="headerlink" title="布局原理 ，当父盒字设为flex布局后，子元素的float、clear、vertical-align属性将失效"></a>布局原理 ，当父盒字设为flex布局后，子元素的float、clear、vertical-align属性将失效</h4><p> 伸缩布局=弹性布局=伸缩盒布局=flex布局</p>
<p> 通过给父级flex来控制子元素盒子的布局</p>
<p> 默认的主轴：x轴 默认的侧轴：y轴  主轴和侧轴与是会变化的，通过flex-direction设置</p>
<h4 id="以下6个属性是对父元素设置的-（父项）"><a href="#以下6个属性是对父元素设置的-（父项）" class="headerlink" title="以下6个属性是对父元素设置的 （父项）"></a>以下6个属性是对父元素设置的 （父项）</h4><ul>
<li><p>flex-direction:设置主轴的方向 可以设置为x轴或y轴</p>
<p>row </p>
<p>column</p>
</li>
<li><p>justify-content：设置主轴上子元素排列方式，对齐方式  </p>
<ul>
<li><p>默认值 flex-start 默认值从头部开始，如果主轴是x轴，则从左至右</p>
</li>
<li><p>flex-end 从尾部开始排列</p>
</li>
<li><p>center 在主轴居中对齐</p>
</li>
<li><p>space-around 平分剩余空间（父盒字-子盒子之和）</p>
</li>
<li><h5 id="space-between-先两边贴边，再平分剩余空间（很重要啊！！！面试！！！）"><a href="#space-between-先两边贴边，再平分剩余空间（很重要啊！！！面试！！！）" class="headerlink" title="space-between 先两边贴边，再平分剩余空间（很重要啊！！！面试！！！）"></a>space-between 先两边贴边，再平分剩余空间（很重要啊！！！面试！！！）</h5></li>
</ul>
</li>
<li><p>flex-wrap：设置子元素是否换行 </p>
<ul>
<li>no-warp 默认值 如果一行放不开，则会缩小子元素的宽度</li>
<li>wrap 换行 ，效果和float相似</li>
</ul>
</li>
<li><p>align-content：设置侧设轴上子元素的排列方式（多行,子项中出现换行出现，单行无效）</p>
<ul>
<li>和justify-content一致 </li>
<li>多了一个stretch（）</li>
</ul>
</li>
<li><p>align-items：设置侧轴上子元素的排列方式（单行）</p>
<ul>
<li>flex-start</li>
<li>flex-end</li>
<li>center</li>
<li>stretch <ul>
<li>如果侧轴是垂直方向,那么在垂直方向如果项目没有设置高度,则会拉伸至弹性父级盒子的高度</li>
<li>如果侧轴为水平方向,如果项目没有设置宽度,那么就会拉伸其宽度至父级弹性盒子的宽度一致。</li>
</ul>
</li>
</ul>
</li>
<li><p>flex-flow：复合属性，相当于同时设置了flex-direction和flex-wrap</p>
<ul>
<li>设置主轴方向，和换行（列）<ul>
<li>flex-row: row wrap;//设置行为主轴，warp为是否换行</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="常见的子项属性"><a href="#常见的子项属性" class="headerlink" title="常见的子项属性"></a>常见的子项属性</h4><ul>
<li><h5 id="flex-子项目占的份数"><a href="#flex-子项目占的份数" class="headerlink" title="flex 子项目占的份数"></a>flex 子项目占的份数</h5><ul>
<li>定义子项目分配剩余空间,用flex来表示占多少份数，1代表全占</li>
</ul>
</li>
<li><p>align-self 控制子项自己在侧轴的排列方式</p>
<ul>
<li>如果对于多个子盒子，只想让某一个子盒子沿着侧轴放置的方式</li>
</ul>
</li>
<li><p>order属性定义子项的排列顺序（前后顺序） </p>
<ul>
<li>-1 (与前面的子项交换位置)</li>
</ul>
</li>
</ul>
<h5 id="常用布局"><a href="#常用布局" class="headerlink" title="常用布局"></a>常用布局</h5><p>左右固定，中间自适应，</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">0.8</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h5 id="两边自适应"><a href="#两边自适应" class="headerlink" title="两边自适应"></a>两边自适应</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>: flex;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: pink;</span><br><span class="line">   <span class="attribute">justify-content</span>:space-between;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">      <span class="attribute">flex </span>:<span class="number">1</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: purple;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title>携程一面收获</title>
    <url>/2021/03/10/flex%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h1 id="携程一面收获"><a href="#携程一面收获" class="headerlink" title="携程一面收获"></a>携程一面收获</h1><a id="more"></a>

<ul>
<li><a href="##%E8%96%84%E5%BC%B1%E7%8E%AF%E8%8A%82">自己的不足</a></li>
<li><a href="##%E6%94%B9%E8%BF%9B%E6%96%B9%E5%90%91">如何改进</a></li>
<li><a href="##%E4%BA%8C%E9%9D%A2%E8%AE%A1%E5%88%92">二面计划</a></li>
</ul>
<h2 id="薄弱环节"><a href="#薄弱环节" class="headerlink" title="薄弱环节"></a>薄弱环节</h2><h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><p>当初学的时候以为flex布局是做响应式的，现在看来并没有那么简单，今天晚上，补上flex这块短板；</p>
<p>粘性定位sticky 在看一下。</p>
<h3 id="Vue-基础知识"><a href="#Vue-基础知识" class="headerlink" title="Vue 基础知识"></a>Vue 基础知识</h3><p>把Vue的基础知识进行一下巩固，花2天</p>
<p>Vue中怎么使单个css只适用于单个Vue组件</p>
<h3 id="心理素质"><a href="#心理素质" class="headerlink" title="心理素质"></a>心理素质</h3><p>虽然把知道的知识点能答个80%，但是，还是很容易慌乱，无论如何我都不能慌。</p>
<h2 id="如何改进"><a href="#如何改进" class="headerlink" title="如何改进"></a>如何改进</h2><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>如何实现三列布局，必需学会三种？左右两列不动，中间响应式变化，？</p>
<p>如何实现等高？一个div里10000字，一个div中1个字</p>
<p>b站黑马视频</p>
<p><a href="https://www.bilibili.com/video/BV1N54y1i7dG?from=search&amp;seid=16020602542480542742">https://www.bilibili.com/video/BV1N54y1i7dG?from=search&amp;seid=16020602542480542742</a></p>
<p>阮一峰日志</p>
<p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html">http://www.ruanyifeng.com/blog/2015/07/flex-examples.html</a></p>
<p><img src="https://img-blog.csdnimg.cn/20210311155402246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mzg4NDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="Vue-基础知识-1"><a href="#Vue-基础知识-1" class="headerlink" title="Vue 基础知识"></a>Vue 基础知识</h3><p>Vue的生命周期函数是什么？</p>
<p>Vue的路由有哪几种形式？</p>
<p>Vue中的插槽传值，深入理解。</p>
<p>Vue基础</p>
<p><a href="https://www.bilibili.com/video/BV1r4411d7dn?from=search&amp;seid=1730302736014483119">https://www.bilibili.com/video/BV1r4411d7dn?from=search&amp;seid=1730302736014483119</a></p>
<p>看着敲完代码后，再看理解一遍官方文档</p>
<p>Vue进阶</p>
<p><a href="https://www.bilibili.com/video/BV1sW411A7vP?from=search&amp;seid=18348750116887456275">https://www.bilibili.com/video/BV1sW411A7vP?from=search&amp;seid=18348750116887456275</a></p>
<h2 id="二面计划"><a href="#二面计划" class="headerlink" title="二面计划"></a>二面计划</h2><p>节流，防抖代码</p>
<p>手写动画函数，css动画函数</p>
<p>原生 JS、DOM </p>
<ul>
<li> 创建、添加、删除、查找元素的 API </li>
<li> addEventListener 回调函数放在哪里？在第二个参数设置，但是不知道放在哪里…… </li>
<li> 基本数据类型（七种） </li>
<li> ES6 和 ES7 增加了哪些类型？（symbol） set、map 应该是数据结构范畴</li>
</ul>
<p>Vue</p>
<ul>
<li>store（vuex） 主要解决了什么问题</li>
<li>vue cli webpack 做了什么处理？</li>
</ul>
<p><a href="https://www.jianshu.com/p/3433142faa68">https://www.jianshu.com/p/3433142faa68</a></p>
<p>继承的几种方式及优缺点？</p>
<blockquote>
<p>说比较经典的几种继承方式并比较优缺点就可以了</p>
</blockquote>
<ol>
<li>借用构造函数继承，使用call或apply方法，将父对象的构造函数绑定在子对象上</li>
<li>原型继承，将子对象的prototype指向父对象的一个实例</li>
<li>组合继承</li>
</ol>
<p>原型链继承的缺点</p>
<ul>
<li>字面量重写原型会中断关系，使用引用类型的原型，并且子类型还无法给超类型传递参数。</li>
</ul>
<p>借用构造函数（类式继承）</p>
<ul>
<li>借用构造函数虽然解决了刚才两种问题，但没有原型，则复用无从谈起。</li>
</ul>
<p>组合式继承</p>
<ul>
<li>组合式继承是比较常用的一种继承方法，其背后的思路是使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样，既通过在原型上定义方法实现了函数复用，又保证每个实例都有它自己的属性。</li>
</ul>
<p>必会面试题：</p>
<p><a href="https://www.cnblogs.com/queenya/p/13572754.html">https://www.cnblogs.com/queenya/p/13572754.html</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/85030402">https://zhuanlan.zhihu.com/p/85030402</a></p>
<p><a href="https://blog.csdn.net/DFF1993/article/details/84551731/">https://blog.csdn.net/DFF1993/article/details/84551731/</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript中的深拷贝的方式总结</title>
    <url>/2021/01/01/javascript%E4%B8%AD%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E7%9A%84%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="javascript中的深拷贝的方式总结"><a href="#javascript中的深拷贝的方式总结" class="headerlink" title="javascript中的深拷贝的方式总结"></a>javascript中的深拷贝的方式总结</h2><a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>深拷贝指拷贝多层数据，每一层的数据都会被拷贝</p>
<h1 id="一、使用递归实现深拷贝（函数不支持）"><a href="#一、使用递归实现深拷贝（函数不支持）" class="headerlink" title="一、使用递归实现深拷贝（函数不支持）"></a>一、使用递归实现深拷贝（函数不支持）</h1><h2 id="方法一：第一个参数是拷贝后数据的存储对象，第二个时候拷贝的对象"><a href="#方法一：第一个参数是拷贝后数据的存储对象，第二个时候拷贝的对象" class="headerlink" title="方法一：第一个参数是拷贝后数据的存储对象，第二个时候拷贝的对象"></a>方法一：第一个参数是拷贝后数据的存储对象，第二个时候拷贝的对象</h2><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>利用for in 把对象或数组中的值取出来，判断类型后赋值或递归</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DeepReproduce</span>(<span class="params">reproduce_obj, obj</span>) </span>&#123; <span class="comment">//对对象进行复制</span></span><br><span class="line">       <span class="keyword">if</span> (obj &amp;&amp; <span class="keyword">typeof</span> obj == <span class="string">&quot;object&quot;</span>) &#123; <span class="comment">//传入的不能是null 和 function   </span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">               <span class="keyword">if</span> (obj.hasOwnProperty(k)) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[k] == <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">                       reproduce_obj[k] = <span class="built_in">Array</span>.isArray(obj[k]) ? [] : &#123;&#125;;<span class="comment">//判断数组还是对</span></span><br><span class="line">                       DeepReproduce(reproduce_obj[k], obj[k]);</span><br><span class="line">                   &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                       reproduce_obj[k] = obj[k];</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       	reproduce = <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        hobbies:[<span class="string">&quot;play basketball play football&quot;</span>],</span><br><span class="line">        name: <span class="string">&quot;ykw&quot;</span>,</span><br><span class="line">        age: <span class="number">22</span>,</span><br><span class="line">        o: &#123;</span><br><span class="line">            id: <span class="number">2</span>,</span><br><span class="line">            name: <span class="string">&quot;qwq&quot;</span>,</span><br><span class="line">            o_o: &#123;</span><br><span class="line">                id: <span class="number">67</span>,</span><br><span class="line">                name: <span class="string">&quot;o_o&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        think: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;think&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    obj.__proto__.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;nihao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    obj.__proto__.pro = <span class="string">&quot;pro&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">    DeepReproduce(a, obj);</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(a.pro);</span><br><span class="line">    <span class="built_in">console</span>.log(a.o == obj.o);</span><br></pre></td></tr></table></figure>
<p>运行结果：<br><img src="https://img-blog.csdnimg.cn/20210131145545882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mzg4NDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="方法二：return-的对象是拷贝后数据的存储对象；"><a href="#方法二：return-的对象是拷贝后数据的存储对象；" class="headerlink" title="方法二：return 的对象是拷贝后数据的存储对象；"></a>方法二：return 的对象是拷贝后数据的存储对象；</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MultiDeep</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> obj;</span><br><span class="line">        <span class="keyword">var</span> reproduce_obj = obj <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">            <span class="keyword">if</span>(obj.hasOwnProperty(k))</span><br><span class="line">            reproduce_obj[k] = MultiDeep(obj[k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reproduce_obj;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p>测试代码，obj 和上面一致</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = MultiDeep(obj);</span><br><span class="line">   <span class="built_in">console</span>.log(a);</span><br><span class="line">   <span class="built_in">console</span>.log(a.pro);</span><br><span class="line">   <span class="built_in">console</span>.log(a.o == obj.o);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210131150354679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mzg4NDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="二、使用JSON实现对象深拷贝"><a href="#二、使用JSON实现对象深拷贝" class="headerlink" title="二、使用JSON实现对象深拷贝"></a>二、使用JSON实现对象深拷贝</h1><h2 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h2><p>把对象转换成json字符串,再把json字符串转换成对象<br>传入的obj和前面相同</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DeepReproduce2</span>(<span class="params">obj</span>) </span>&#123; <span class="comment">//对对象进行复制</span></span><br><span class="line">       <span class="keyword">let</span> obj_str = <span class="built_in">JSON</span>.stringify(obj);</span><br><span class="line">       <span class="keyword">let</span> reproduce_obj = <span class="built_in">JSON</span>.parse(obj_str);</span><br><span class="line">       <span class="keyword">return</span> reproduce_obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> a = DeepReproduce2(obj);</span><br><span class="line">    a.think = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;athink&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    a.think();</span><br><span class="line">    obj.think();</span><br></pre></td></tr></table></figure>
<p>测试结果：可以看出引用对象函数也进行了深拷贝，真是好方法。<br><img src="https://img-blog.csdnimg.cn/2021013115160936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mzg4NDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="三、使用-extend实现对象深拷贝"><a href="#三、使用-extend实现对象深拷贝" class="headerlink" title="三、使用$.extend实现对象深拷贝"></a>三、使用$.extend实现对象深拷贝</h1><h2 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h2><p>jQuery.extend() 函数用于将一个或多个对象的内容合并到目标对象。<br>指示是否深度合并<br>$.extend( [deep ], target, object1 [, objectN ] )</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = $.extend(<span class="literal">true</span>,&#123;&#125;,obj);</span><br><span class="line">    a.think = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;athink&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(a.o==obj.o)</span><br><span class="line">    a.think();</span><br><span class="line">    obj.think();</span><br></pre></td></tr></table></figure>
<p>测试结果：如下图，竟然把要复制对象的__protot__复制过来了，不太好</p>
<p><img src="https://img-blog.csdnimg.cn/20210131152922381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mzg4NDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><font color=#999AAA >加快学习速度！！！！！！！！！！！！！！！！</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>java单元测试_毕业实习</title>
    <url>/2021/03/02/java%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="java单元测试-毕业实习"><a href="#java单元测试-毕业实习" class="headerlink" title="java单元测试_毕业实习"></a>java单元测试_毕业实习</h1><a id="more"></a>

<p>service 业务编写</p>
<p>dao数据库</p>
<p>controller </p>
<p>tomcat 应用服务器</p>
<h3 id="一、EasyMock-使用动态代理实现模拟对象创建，一般可以满足以下测试需求"><a href="#一、EasyMock-使用动态代理实现模拟对象创建，一般可以满足以下测试需求" class="headerlink" title="一、EasyMock 使用动态代理实现模拟对象创建，一般可以满足以下测试需求"></a>一、EasyMock 使用动态代理实现模拟对象创建，一般可以满足以下测试需求</h3><p>1、要测试的模块依赖于其它自己控制不了的模块，如第三方服务，其它组员在开发的服务等，它们都没办法配合你来测试；</p>
<p>2、涉及到数据库操作，但当时条件连接不了数据库或你不想将自己的测试结果改动到数据库；</p>
<p>3、模块依赖于spring容器注入其它服务实例，但你又不想启动spring容器。</p>
<p>总之，EasyMock能帮我们模拟出任何我们想要的支持对象，并且我们可以使用这些对象进行逻辑操作</p>
<h3 id="二、具体使用方法"><a href="#二、具体使用方法" class="headerlink" title="二、具体使用方法"></a>二、具体使用方法</h3><h4 id="1、模拟成员变量"><a href="#1、模拟成员变量" class="headerlink" title="1、模拟成员变量"></a>1、模拟成员变量</h4><p>EasyMock.createMock(要模拟的成员变量类型);</p>
<h4 id="2、设定模拟成员的函数行为"><a href="#2、设定模拟成员的函数行为" class="headerlink" title="2、设定模拟成员的函数行为"></a>2、设定模拟成员的函数行为</h4><p>1)有返回值</p>
<p>Easymock.expect(模拟成员的某个要模拟的函数).andReturn(期待的返回值)</p>
<p>2）没返回值</p>
<p>首先模拟成员调用要模拟的函数，然后在后面跟上一句：EasyMock.expectLastCall()，如果希望为该函数加上一个返回，可以用：</p>
<p>EasyMock.expectLastCall().andAnswer(new IAnswer&lt;任何类型&gt;(){<br>　　public String answer() throws Throwable {<br>　　　　log.info(EasyMock.getCurrentArguments()[0]）;//打印参数，以确定传参是否准确（[0]表示第一个参数）<br>　　　　return 作何类型;<br>　　}<br>});</p>
<p>因为完全没返回又没日志输出的时候，你可能很难确定这个函数的操作结果是什么</p>
<h4 id="3、模糊参数"><a href="#3、模糊参数" class="headerlink" title="3、模糊参数"></a>3、模糊参数</h4><p>有时候要模拟的函数的参数是在程序运行过程中调用的，参数值来自于程序执行结果，这时可以用模糊参数来解决，模糊参数有：</p>
<p>isA、isNull、anyInt等</p>
<h4 id="4、开始测试"><a href="#4、开始测试" class="headerlink" title="4、开始测试"></a>4、开始测试</h4><p>EasyMock.replay(模拟成员);</p>
<h3 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h3><h4 id="1、要测试的类"><a href="#1、要测试的类" class="headerlink" title="1、要测试的类"></a>1、要测试的类</h4><p>public class UserServiceImpl{<br>　　private UserDao dao;<br>　　public List<String> queryNames(String[] ids) throws Exception{<br>　　　　try{<br>　　　　　　return dao.getNames(ids);<br>　　　　}catch(Exception e){<br>　　　　　　throw e;<br>　　　　}<br>　　　　return null;<br>　　}<br>}</p>
<p>该类依赖UserDao，但UserDao可能还没实现，或要靠spring容器来注入</p>
<h4 id="2、测试代码"><a href="#2、测试代码" class="headerlink" title="2、测试代码"></a>2、测试代码</h4><p>@Test<br>public void test() {</p>
<p>　　String[] ids = {‘1’,’2’,’3’};</p>
<p>　　List<String> returnNams = Arrays.asList(“a,b,c”.split(“,”));</p>
<p>　　UserDao userDaoMock = EasyMock.createMock(UserDao.class);//创建模拟成员</p>
<p>　　EasyMock.expect(userDaoMock.getNames(ids )).andReturn(returnNams);</p>
<p>   EasyMock.replay(userDaoMock );//重放Mock对象   </p>
<p>　　UserServiceImpl userServiceImpl = new UserServiceImpl();</p>
<p>　　userServiceImpl .queryNames(ids);//目标类调用目标方法</p>
<p>　　EasyMock.verify(userDaoMock );//验证Mock对象    </p>
<p>}</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>jsonp解决跨域</title>
    <url>/2021/03/11/jsonp%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<h1 id="jsonp解决跨域"><a href="#jsonp解决跨域" class="headerlink" title="jsonp解决跨域"></a>jsonp解决跨域</h1><a id="more"></a>

<p>原理：同源政策是限制ajax访问不同源服务器的一种限制，要怎么解决呢？</p>
<p>不用ajax了呗，那怎么拿到服务器端的数据呢？script，script不会受到影响。</p>
<p><img src="https://img-blog.csdnimg.cn/20210311114421237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mzg4NDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210311114506304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mzg4NDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li><p>将不同源的服务器请求地址写在script标签的src属性中，这个请求地址返回一个函数调用的字符串“fn(data)”</p>
<p>这个字符串在加载script标签时会被执行，data是服务器返回的数据</p>
</li>
<li><p>服务器端的相应数 </p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>ajax</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>三大高级排序算法</title>
    <url>/2021/03/14/%E4%B8%89%E5%A4%A7%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>三大高级排序算法（堆排序、归并排序、快速排序）</p>
<a id="more"></a>

<p>堆排序：实质是对选择排序的一种改进，</p>
<p><img src="https://img-blog.csdnimg.cn/20210314085413329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mzg4NDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>选择排序的问题分析：ScanForMin中也是个for循环，这样的话时间复杂度为O(N^2);</p>
<p>Swap函数是线性的，不用优化，</p>
<h5 id="问题是如何从待排数组中找到最小元？"><a href="#问题是如何从待排数组中找到最小元？" class="headerlink" title="问题是如何从待排数组中找到最小元？"></a>问题是如何从待排数组中找到最小元？</h5><p>使用最小堆！最小堆的根节点永远是最小的。</p>
<h5 id="实现1："><a href="#实现1：" class="headerlink" title="实现1："></a>实现1：</h5><p><img src="https://img-blog.csdnimg.cn/20210314091012344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mzg4NDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h5 id="实现2："><a href="#实现2：" class="headerlink" title="实现2："></a>实现2：</h5><p><img src="https://img-blog.csdnimg.cn/20210314090902163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mzg4NDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 排序思路：（降序）</span></span><br><span class="line"><span class="comment"> * 将堆根保存于尾部，并对剩余序列调用调整函数，调整完成后，再将最大跟保存于尾部-1（-1，-2，...，-i），</span></span><br><span class="line"><span class="comment"> * 再对剩余序列进行调整，反复进行该过程，直至排序完成。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将最大的元素调整到堆顶*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AdjustHeap</span>(<span class="params">arr, pos, len</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> swap = arr[pos];      <span class="comment">//保存当前节点</span></span><br><span class="line">    <span class="keyword">var</span> child = pos * <span class="number">2</span> + <span class="number">1</span>;  <span class="comment">//定位到当前节点的左边的子节点</span></span><br><span class="line">    <span class="keyword">while</span>(child &lt; len)&#123;       <span class="comment">//递归遍历所有的子节点</span></span><br><span class="line">        <span class="comment">//判断当前节点是否有右节点，若右节点较大，就采用右节点和当前节点进行比较</span></span><br><span class="line">        <span class="keyword">if</span>(child + <span class="number">1</span> &lt; len &amp;&amp; arr[child] &lt; arr[child + <span class="number">1</span>])&#123;</span><br><span class="line">            child += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//比较当前节点和最大的子节点，小于就交换，交换后将当前节点定位到子节点上</span></span><br><span class="line">        <span class="keyword">if</span>(arr[pos] &lt; arr[child])&#123;</span><br><span class="line">            arr[pos] = arr[child];</span><br><span class="line">            pos = child;</span><br><span class="line">            child = pos * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[pos] = swap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 构建堆：</span></span><br><span class="line"><span class="comment"> * 满足：树中任一非叶子结点的关键字均不大于（或不小于）其左右孩子结点的关键字。</span></span><br><span class="line"><span class="comment"> * 实现：从最后一个拥有子节点的节点开始，将该节点和其他节点进行比较，将最大的数交换给该节点，</span></span><br><span class="line"><span class="comment"> *      交换后再依次向前节点进行相同的交换处理，直到构建出大顶堆。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BuildHeap</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=arr.length/<span class="number">2</span>; i&gt;=<span class="number">0</span>; i--)&#123;  <span class="comment">//构建打顶堆</span></span><br><span class="line">      AdjustHeap(arr, i, arr.length);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*堆排序算法*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HeapSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    BuildHeap(arr); <span class="comment">//构建堆</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=arr.length-<span class="number">1</span>; i&gt;<span class="number">0</span>; i--)&#123;   <span class="comment">//从数组的尾部进行调整</span></span><br><span class="line">        <span class="keyword">var</span> swap = arr[i];  <span class="comment">//堆顶永远是最大的元素,将堆顶和尾部元素交换，最大元素就保存在尾部，并且不参与后面的调整</span></span><br><span class="line">        arr[i] = arr[<span class="number">0</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = swap;</span><br><span class="line">        AdjustHeap(arr, <span class="number">0</span>, i); <span class="comment">//将最大的元素进行调整，将最大的元素调整到堆顶</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">46</span>,<span class="number">12</span>,<span class="number">33</span>,<span class="number">72</span>,<span class="number">68</span>,<span class="number">19</span>,<span class="number">80</span>,<span class="number">33</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;before: &#x27;</span> + arr);</span><br><span class="line">HeapSort(arr);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27; after: &#x27;</span> + arr);</span><br></pre></td></tr></table></figure>
<p>整个过程为首先构建一个大顶堆，然后，将大顶堆的最后一个元素与尾部元素交换，每次选择出前n项中最大的元素放到尾部，思想是选择排序的思想，如何找出最大的那一项是采用了堆实现。</p>
<p>自己实现一遍！</p>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>由于以前学过快排这里再来一次复习；</p>
<h3 id="快速排序的3个基本步骤："><a href="#快速排序的3个基本步骤：" class="headerlink" title="快速排序的3个基本步骤："></a>快速排序的3个基本步骤：</h3><ol>
<li>从数组中选择一个元素作为基准点</li>
<li>排序数组，所有比基准值小的元素摆放在左边，而大于基准值的摆放在右边。每次分割结束以后基准值会插入到中间去。</li>
<li>最后利用递归，将摆放在左边的数组和右边的数组在进行一次上述的1和2操作。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.length&lt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> pivotIndex=<span class="built_in">Math</span>.floor(arr.length/<span class="number">2</span>);<span class="comment">//找到那个基准数</span></span><br><span class="line">        <span class="keyword">var</span> pivot=arr.splice(pivotIndex,<span class="number">1</span>)[<span class="number">0</span>]; <span class="comment">//取出基准数，并去除，splice返回值为数组。</span></span><br><span class="line">        <span class="keyword">var</span> left=[]; </span><br><span class="line">        <span class="keyword">var</span> right=[];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&lt;pivot)&#123;</span><br><span class="line">                left.push(arr[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right.push(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> quickSort(left).concat([pivot],quickSort(right)); <span class="comment">//加入基准数</span></span><br><span class="line">    &#125;</span><br><span class="line">    arr=[<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(quickSort(arr)); <span class="comment">//[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure>
<h2 id="待更"><a href="#待更" class="headerlink" title="待更"></a>待更</h2>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>关于javascript中的组合，寄生，寄生组合继承的理解</title>
    <url>/2021/02/02/%E5%85%B3%E4%BA%8Ejavascript%E4%B8%AD%E7%9A%84%E7%BB%84%E5%90%88%EF%BC%8C%E5%AF%84%E7%94%9F%EF%BC%8C%E5%AF%84%E7%94%9F%E7%BB%84%E5%90%88%E7%BB%A7%E6%89%BF%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="javascript中的组合，寄生，寄生组合继承"><a href="#javascript中的组合，寄生，寄生组合继承" class="headerlink" title="javascript中的组合，寄生，寄生组合继承"></a>javascript中的组合，寄生，寄生组合继承</h2><a id="more"></a>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="什么是继承"><a href="#什么是继承" class="headerlink" title="什么是继承"></a>什么是继承</h2><p> 继承是让子类获得父类的属性和方法，或者可以重新定义属性和方法</p>
<h2 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h2><p>如何实现继承呢？<br>在ES6前并没有类，没有关键字extends 如何实现呢？<br>从继承的结果来看，继承就是让子对象拥有父对象的属性和方法。我们很容易就能想到，我们将父对象直接赋值给子对象，这样子对象便有了父对象的全部属性和方法。这么浅显的道理便是寄生式继承。当然可以对子对象进行增强（也就是重写方法或增加属性)<br>//寄生式继承实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> father = &#123;</span><br><span class="line">        name: <span class="string">&quot;father&quot;</span>,</span><br><span class="line">        age : <span class="number">34</span></span><br><span class="line">    &#125;</span><br><span class="line">    father.__proto__.talk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">superType</span>)</span>&#123;    <span class="comment">//寄生式继承函数实际上是复制一份父类对象，给这个父类对象添加属性</span></span><br><span class="line">        <span class="keyword">var</span> subType = <span class="built_in">Object</span>(father);<span class="comment">//将实例对象完全复制一份 给subType</span></span><br><span class="line">        subType.name = <span class="string">&quot;son&quot;</span>;<span class="comment">//重新赋值</span></span><br><span class="line">        <span class="keyword">return</span> subType;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> son = Son(father)</span><br><span class="line">    <span class="built_in">console</span>.log(son)</span><br></pre></td></tr></table></figure>
<p>从这个寄生式继承我们可看到，我们仅仅是将一个父对象复制了一份赋值给子对象，很明显，这一种方法有很大的弊端，子对象虽然有了和父亲一样的属性和方法，但是属性值和一样，需要重新赋值，这好吗？这不好。这个方法有优点吗?有，他们的原型对象是同一个。<br>再来看看组合式继承</p>
<h2 id="组合式继承"><a href="#组合式继承" class="headerlink" title="组合式继承"></a>组合式继承</h2><p>因为我们继承的定义是让子类获得父类的属性和方法，所以我们理所应当的从子类的构造函数入手，看如何能让他获得父类的属性与方法。<br>对于属性：可以想到，在子类的构造函数中调用父类的构造函数，目的在new子类构造函数的时候，能执行父类构造函数中的代码，但是直接调用Father(参数)的话，其中的this指向的是函数的调用者，也就是window，我们是要让子类有父类的属性，不是给window添加的，所以这里在调用的时候需要用call方法指定是调用者（new的子类对象)，给子类对象添加属性。<br>对于方法：可以想到，通过原型链来查找，什么意思呢？就是说，给这个子类对象的原型对象等于父类对象，作用就是子类对象在查找父类对象的函数时，先在自己的属性中找，没找见，去原型对象中找，原型对象中的原型对象中找见了，于是，子类拥有了父类的方法。这便是方法的继承。（感觉很蠢，明明我们只要子类原型对象中找到父类原型对象中定义的函数，但却new了一个父类对象出来赋值给了子类的原型对象，能不能直接把父类的原型对象赋值给子类原型对象，这就是寄生组合式继承）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    Father.prototype.talk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name,age,score</span>)</span>&#123;</span><br><span class="line">    Father.call(<span class="built_in">this</span>,name,age);<span class="comment">//使当前的Father构造函数中的this是Son构造函数的实例；给该实例复值</span></span><br><span class="line">    <span class="built_in">this</span>.score = score;</span><br><span class="line">    Son.prototype =<span class="keyword">new</span> Father();</span><br><span class="line">    Son.prototype.constructor = Son;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son(<span class="string">&quot;son&quot;</span>,<span class="number">12</span>,<span class="number">99</span>);</span><br><span class="line">son.talk()</span><br><span class="line"><span class="built_in">console</span>.log(son);</span><br></pre></td></tr></table></figure>
<p>注意：在使用组合式继承时，不能使用这种保险的方式生成构造函数，理由不必赘述，上面已经说明。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(<span class="built_in">this</span> <span class="keyword">instanceof</span> Father))&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> Father(name,age);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<h2 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    Father.prototype.talk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name,age,score</span>)</span>&#123;</span><br><span class="line">    Father.call(<span class="built_in">this</span>,name,age);<span class="comment">//使当前的Father构造函数中的this是Son构造函数的实例；给该实例复值</span></span><br><span class="line">    <span class="built_in">this</span>.score = score;</span><br><span class="line">    Son.prototype =Father.prototype;<span class="comment">//直接把父类的原型赋值给子类</span></span><br><span class="line">    Son.prototype.constructor = Son;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son(<span class="string">&quot;son&quot;</span>,<span class="number">12</span>,<span class="number">99</span>);</span><br><span class="line">son.talk()</span><br><span class="line"><span class="built_in">console</span>.log(son);</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>组合式继承：指的是将原型链和借用构造函数的技术组合到一块，从而发挥二者之长的一种继承模式。其背后的思路是使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。<br>寄生式继承，可以在不必预先定义构造函数的情况下实现继承，其本质是执行对给定对象的浅复制。而复制得到的副本还可以得到进一步改造<br>寄生组合式继承，集寄生式继承和组合继承的优点与一身，是实现基于类型继承的最有效方式。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串的冒泡排序</title>
    <url>/2020/02/05/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="字符串的冒泡排序"><a href="#字符串的冒泡排序" class="headerlink" title="字符串的冒泡排序"></a>字符串的冒泡排序</h2><a id="more"></a>


<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> N;</span><br><span class="line">	<span class="keyword">int</span> C;</span><br><span class="line">	<span class="keyword">char</span> a[<span class="number">110</span>][<span class="number">20</span>]=&#123;&#125;;</span><br><span class="line">	<span class="keyword">char</span> a1[<span class="number">20</span>]=&#123;&#125;;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d\n&quot;</span>,&amp;N,&amp;C);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">		gets(a[i]);<span class="comment">//获得从输入流中获得一行的输入；给 </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">0</span>;i&lt;C;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>;j&lt;N-i<span class="number">-1</span>;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">strcmp</span>(a[j],a[j+<span class="number">1</span>])&gt;<span class="number">0</span>)&#123;</span><br><span class="line">				<span class="built_in">strcpy</span>(a1,a[j]);</span><br><span class="line">				<span class="built_in">strcpy</span>(a[j],a[j+<span class="number">1</span>]);</span><br><span class="line">				<span class="built_in">strcpy</span>(a[j+<span class="number">1</span>],a1);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">		<span class="built_in">puts</span>(a[i]); </span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>收获：gets函数<br>函数：gets<br>  头文件：stdio.h<br>功能：从stdin流中读取字符串，直至接受到换行符或EOF时停止，并将读取的结果存放在str指针所指向的字符数组中。换行符不作为读取串的内容，读取的换行符被转换为null值，并由此来结束字符串。<br><strong>gets函数从stdin流中读取字符串，直至接受到换行符或EOF时停止读入；<br>char *gets(char *str); 其中str 是一个字符指针变量名，也可以是一个字符数组名。gets() 函数的功能是从输入缓冲区中读取一个字符串存储到字符指针变量 str 所指向的内存空间。</strong><br>strcmp:字符串比较函数；</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>王挺MOOC编译原理实验1</title>
    <url>/2020/06/02/%E7%8E%8B%E6%8C%BAMOOC%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C1/</url>
    <content><![CDATA[<p>王挺MOOC编译原理实验1</p>
<a id="more"></a>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* begin */</span></span><br><span class="line">[+]				&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: PLUS\n&quot;</span>,yytext);&#125;</span><br><span class="line">[-]				&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: MINUS\n&quot;</span>,yytext);&#125;</span><br><span class="line">[*]				&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: TIMES\n&quot;</span>,yytext);&#125;</span><br><span class="line">[/]				&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: DIVSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">[:][=] 			&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: BECOME\n&quot;</span>,yytext);&#125;</span><br><span class="line">[&#x27;][^&#x27;]*[&#x27;]			&#123;printf(&quot;%s: CHARCON\n&quot;,yytext);&#125;</span><br><span class="line">[\$\!\@\#\%^\&amp;\*\~\_\\]		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: ERROR\n&quot;</span>,yytext);&#125;</span><br><span class="line">[=]				&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: EQL\n&quot;</span>,yytext);&#125;</span><br><span class="line">[&lt;][&gt;]			&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: NEQ\n&quot;</span>,yytext);&#125;</span><br><span class="line">[&lt;]				&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: LSS\n&quot;</span>,yytext);&#125;</span><br><span class="line">[&lt;][=]			&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: LEQ\n&quot;</span>,yytext);&#125;</span><br><span class="line">[&gt;]				&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: GTR\n&quot;</span>,yytext);&#125;</span><br><span class="line">[&gt;][=]			&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: GEQ\n&quot;</span>,yytext);&#125;</span><br><span class="line">[o][f]			&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: OFSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">[a][r][r][a][y] &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: ARRAYSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">[p][r][o][g][r][a][m] &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: PROGRAMSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">[m][o][d]		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: MODSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">[a][n][d]		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: ANDSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">[o][r]			&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: ORSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">[n][o][t]		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: NOTSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">[[]				&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: LBRACK\n&quot;</span>,yytext);&#125;</span><br><span class="line">[]]				&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: RBRACK\n&quot;</span>,yytext);&#125;</span><br><span class="line">[(]				&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: LPAREN\n&quot;</span>,yytext);&#125;</span><br><span class="line">[)]				&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: RPAREN\n&quot;</span>,yytext);&#125;</span><br><span class="line">[,]				&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: COMMA\n&quot;</span>,yytext);&#125;</span><br><span class="line">[;]				&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: SEMICOLON\n&quot;</span>,yytext);&#125;</span><br><span class="line">[.]				&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: PERIOD\n&quot;</span>,yytext);&#125;</span><br><span class="line">[:]				&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: COLON\n&quot;</span>,yytext);&#125;</span><br><span class="line">[b][e][g][i][n] &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: BEGINSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">[e][n][d]		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: ENDSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">[i][f]			&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: IFSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">[t][h][e][n]	&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: THENSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">[e][l][s][e]	&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: ELSESYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">[w][h][i][l][e] &#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: WHILESYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">[d][o]			&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: DOSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">[c][a][l][l]	&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: CALLSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">[c][o][n][s][t]	&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: CONSTSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">[t][y][p][e]	&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: TYPESYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">[v][a][r]		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: VARSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">[p][r][o][c][e][d][u][r][e]	&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: PROCSYM\n&quot;</span>,yytext);&#125;</span><br><span class="line">&#123;INTCON&#125;		&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: INTCON\n&quot;</span>, yytext);&#125;</span><br><span class="line">&#123;IDENT&#125;			&#123;<span class="built_in">printf</span>(<span class="string">&quot;%s: IDENT\n&quot;</span>, yytext);&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* end */</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200417170901228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mzg4NDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>编程基础</title>
    <url>/2019/04/02/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="编程基础练习题"><a href="#编程基础练习题" class="headerlink" title="编程基础练习题"></a>编程基础练习题</h2><a id="more"></a>
<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>任何一个正整数都可以用2的幂次方表示。例如：</p>
<pre><code>137=27+23+20
</code></pre>
<p>同时约定方次用括号来表示，即ab可表示为a(b)。由此可知，137可表示为：</p>
<pre><code>2(7)+2(3)+2(0)
</code></pre>
<p>进一步：7=22+2+20（21用2表示）</p>
<pre><code>    3=2+20
</code></pre>
<p>所以最后137可表示为：</p>
<pre><code>2(2(2)+2+2(0))+2(2+2(0))+2(0)
</code></pre>
<p>又如：</p>
<pre><code>1315=210+28+25+2+1
</code></pre>
<p>所以1315最后可表示为：</p>
<pre><code>2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)
</code></pre>
<p>输入</p>
<p>一个正整数n（n≤20000）。</p>
<p>输出</p>
<p>一行，符合约定的n的0，2表示（在表示中不能有空格）。</p>
<p>样例输入</p>
<p>137<br>样例输出</p>
<p>2(2(2)+2+2(0))+2(2+2(0))+2(0)<br>————————————————————————————</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">translate</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;2(0)&quot;</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;2&quot;</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> p=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(p&lt;=n)&#123; <span class="comment">//只能大于函数参数n</span></span><br><span class="line">			p&lt;&lt;=<span class="number">1</span>; <span class="comment">//p左移，左移一次代表乘2</span></span><br><span class="line">			cnt++; </span><br><span class="line">		&#125;</span><br><span class="line">		cnt--; </span><br><span class="line">		<span class="keyword">if</span>(n==p/<span class="number">2</span>)&#123; <span class="comment">//如果只有一个1 那么好办，只输出2（）即可；关键在cnt</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;2(&quot;</span>;</span><br><span class="line">			translate(cnt);<span class="comment">//移动几次为几次方；括号中的为指数，而不是倍数</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;)&quot;</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(p/<span class="number">2</span>==<span class="number">2</span>)&#123; <span class="comment">////</span></span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;2+&quot;</span>;</span><br><span class="line">				translate(n-p/<span class="number">2</span>); <span class="comment">//3-2</span></span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;2(&quot;</span>;</span><br><span class="line">				translate(cnt);</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;)+&quot;</span>;</span><br><span class="line">				translate(n-p/<span class="number">2</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">oj_2_2</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	translate(n);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	oj_2_2();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>n是3时，一种特殊情况，p为4；m要是大于3，则变化的都有2（）+。。。，只有n = 3时，表达式开头为2，可以将n = 3 作为特殊情况，而输出唯一的一个字符串吗？可以，因为n == 3是一个特殊情////况，这是一个大坑，这道题的核心思想在于对m的情况分类；难点在于m==3和m的次方确定，和n-p/2为n去掉最高位的数；那么什么是递归呢？对当前情况进行处理，有终止条件，则无后续，否则，translate(n-p/2);给他下一个数；让他处理。<br>左移的位数为2的次方数；可以得到下一个处理的数；<br>1010101100，求一个数的递归的每次去掉最高位的1，n-p/2<br>while(p&gt;n){<br>    p&lt;&lt;=1;<br>    cnt++；<br>}</p>
]]></content>
      <categories>
        <category>编程基础</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>编程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>英语单词01</title>
    <url>/2021/03/01/%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D01/</url>
    <content><![CDATA[<h2 id="今天的单词"><a href="#今天的单词" class="headerlink" title="今天的单词"></a>今天的单词</h2><a id="more"></a>

<ul>
<li><p>dove</p>
</li>
<li><p>drawer[2]</p>
</li>
<li><p>duck[2]</p>
</li>
<li><p>due</p>
</li>
<li><p>foam</p>
</li>
<li><p>for good=perpetual</p>
</li>
<li><p>garlic</p>
</li>
<li><p>gasolene</p>
</li>
<li><p>get on well with</p>
</li>
<li><p>give[2]</p>
</li>
<li><p>go well[3]</p>
</li>
<li><p>grass[5] n3 v2</p>
</li>
<li><p>have little to do with</p>
</li>
<li><p>holy</p>
</li>
<li><p>hose</p>
</li>
<li><p>howl</p>
</li>
<li><p>hurricane</p>
</li>
<li><p>jog</p>
</li>
<li><p>jug</p>
</li>
<li><p>keen</p>
</li>
<li><p>ladder</p>
</li>
<li><p>make ends meet</p>
</li>
<li><p>mat</p>
</li>
<li><p>match[3]</p>
</li>
<li><p>mayor</p>
</li>
<li><p>mat</p>
</li>
<li><p>meet[2]</p>
</li>
<li><p>ministry[2]</p>
</li>
<li><p>moss</p>
</li>
<li><p>surveillance</p>
</li>
<li><p>critique</p>
</li>
<li><p>populate</p>
</li>
<li><p>confide</p>
</li>
<li><p>sow</p>
</li>
<li><p>mobility</p>
</li>
<li><p>operative</p>
</li>
<li><p>stuck</p>
</li>
<li><p>excavation</p>
</li>
<li><p>enlist[2]v2</p>
</li>
<li><p>predator</p>
</li>
<li><p>hack[3]v2n1</p>
</li>
<li><p>follow suit</p>
</li>
<li><p>bribery</p>
</li>
<li><p>up in arms</p>
</li>
<li><p>juggle</p>
</li>
<li><p>be contemptuous of</p>
</li>
<li><p>draw a conclusion from</p>
</li>
<li><p>keep pace with</p>
</li>
<li><p>the rest of</p>
</li>
<li><p>put it another way</p>
</li>
<li><p>be obsessed with</p>
</li>
<li><p>get the nod</p>
</li>
<li><p>result in</p>
</li>
<li><p> as it happens</p>
</li>
<li><p>be obsessed with</p>
</li>
<li><p>consent to</p>
</li>
<li><p>in the midst of</p>
</li>
</ul>
<p>注意：[n] 意思是要知道几个意思</p>
]]></content>
      <categories>
        <category>英语</category>
        <category>单词</category>
      </categories>
      <tags>
        <tag>英语jig</tag>
      </tags>
  </entry>
  <entry>
    <title>说反话-加强版</title>
    <url>/2020/02/02/%E8%AF%B4%E5%8F%8D%E8%AF%9D-%E5%8A%A0%E5%BC%BA%E7%89%88/</url>
    <content><![CDATA[<h2 id="浙大pat基础练习题"><a href="#浙大pat基础练习题" class="headerlink" title="浙大pat基础练习题"></a>浙大pat基础练习题</h2><a id="more"></a>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">5000000</span>];</span><br><span class="line"><span class="keyword">char</span> b[<span class="number">5000000</span>];</span><br><span class="line"><span class="comment">//构建函数Find：获得每一个字符串在a中的起始位置和结束位置；构成一个数组；按这个数组输出；</span></span><br><span class="line"><span class="keyword">int</span> Loc[<span class="number">1000000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">int</span> Loc[])</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> j=<span class="number">0</span>; </span><br><span class="line">	<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(a[i]==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	Loc[j] = i;</span><br><span class="line">	j++;</span><br><span class="line">	<span class="keyword">for</span>(;i&lt;<span class="built_in">strlen</span>(a);i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]==<span class="string">&#x27; &#x27;</span>||a[i]==<span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(flag==<span class="number">0</span>)&#123;</span><br><span class="line">				Loc[j] = i;</span><br><span class="line">				j++;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">			flag =<span class="number">1</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;</span><br><span class="line">				Loc[j] = i;</span><br><span class="line">				j++;</span><br><span class="line">				</span><br><span class="line">			&#125;flag=<span class="number">0</span>;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(flag==<span class="number">0</span>)&#123;</span><br><span class="line">		Loc[j] = i;</span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> Count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> flag0 = <span class="number">0</span>;</span><br><span class="line">	gets(a);<span class="comment">//处理a;</span></span><br><span class="line">	<span class="keyword">int</span> c =Find(a,Loc);</span><br><span class="line"><span class="comment">//	for(int i =0;i&lt;=c;i++) //查看数组是否正确；</span></span><br><span class="line"><span class="comment">//		printf(&quot;%d&quot;,Loc[i]);</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=c<span class="number">-1</span>;i&gt;<span class="number">0</span>;i=i<span class="number">-2</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=Loc[i<span class="number">-1</span>];j&lt;Loc[i];j++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,a[j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(i!=<span class="number">1</span>)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意：在PTA中选择运行环境是C(clang);<br>收获：对于数组问题可以将其转化为寻找数组下标的问题；<br>gets函数获得每一行的字符，gets获得的字符自动删除换行符；<br>strlen函数求字符串长度时遇到字符数组a[i] = 0 时返回；也就是说字符数组最后一个必有0；</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>谢宾斯基三角形的绘制（递归）</title>
    <url>/2020/12/02/%E8%B0%A2%E5%AE%BE%E6%96%AF%E5%9F%BA%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E7%BB%98%E5%88%B6%EF%BC%88%E9%80%92%E5%BD%92%EF%BC%89/</url>
    <content><![CDATA[<h2 id="谢宾斯基三角形的绘制（递归）"><a href="#谢宾斯基三角形的绘制（递归）" class="headerlink" title="谢宾斯基三角形的绘制（递归）"></a>谢宾斯基三角形的绘制（递归）</h2><a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#谢宾斯基三角形.py</span></span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">san</span>(<span class="params">l,n</span>):</span><span class="comment">#l为长度 n为几次递归</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            turtle.fd(l)</span><br><span class="line">            turtle.left(<span class="number">120</span>)</span><br><span class="line">        turtle.fd(l / <span class="number">2</span>)</span><br><span class="line">        turtle.left(<span class="number">60</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            turtle.fd(l/<span class="number">2</span>)</span><br><span class="line">            turtle.left(<span class="number">120</span>)</span><br><span class="line">        turtle.right(<span class="number">60</span>)</span><br><span class="line">        turtle.backward(l/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment">#一次画图的转化</span></span><br><span class="line">        san(l/<span class="number">2</span>, n-<span class="number">1</span>)</span><br><span class="line">        turtle.left(<span class="number">60</span>)</span><br><span class="line">        turtle.fd(l / <span class="number">2</span>)</span><br><span class="line">        turtle.right(<span class="number">60</span>)</span><br><span class="line">        san(l/<span class="number">2</span>, n - <span class="number">1</span>)</span><br><span class="line">        turtle.fd(l/<span class="number">2</span>)</span><br><span class="line">        turtle.right(<span class="number">120</span>)</span><br><span class="line">        turtle.fd(l / <span class="number">2</span>)</span><br><span class="line">        turtle.left(<span class="number">120</span>)</span><br><span class="line">        san(l / <span class="number">2</span>, n - <span class="number">1</span>)</span><br><span class="line">        turtle.backward(l / <span class="number">2</span>)</span><br><span class="line">san(<span class="number">200</span>,<span class="number">4</span>)</span><br><span class="line">turtle.done()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>递归 有if else 为框架组成 基元素 和 递归关系组成了递归。注意理解递归关系是一次执行的总体框架，不考虑具体怎么做，只处理当前步，返回。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基础学习</title>
    <url>/2020/11/05/Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="Vue常用特性"><a href="#Vue常用特性" class="headerlink" title="Vue常用特性"></a>Vue常用特性</h2><a id="more"></a>

<h3 id="表单基本操作"><a href="#表单基本操作" class="headerlink" title="表单基本操作"></a>表单基本操作</h3><ul>
<li><p>获取单选框中的值</p>
<ul>
<li>通过v-model</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> 	<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		1、 两个单选框需要同时通过v-model 双向绑定 一个值 </span></span><br><span class="line"><span class="comment">        2、 每一个单选框必须要有value属性  且value 值不能一样 </span></span><br><span class="line"><span class="comment">		3、 当某一个单选框选中的时候 v-model  会将当前的 value值 改变 data 中的 数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		gender 的值就是选中的值，我们只需要实时监控他的值就可以了</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;gender&#x27;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;gender&#x27;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">         data: &#123;</span><br><span class="line"><span class="javascript">             <span class="comment">// 默认会让当前的 value 值为 2 的单选框选中</span></span></span><br><span class="line">                gender: 2,  </span><br><span class="line">            &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>获取复选框中的值</p>
<ul>
<li>通过v-model</li>
<li>和获取单选框中的值一样 </li>
<li>复选框 <code>checkbox</code> 这种的组合时   data 中的 hobby 我们要定义成数组 否则无法实现多选</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">	<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		1、 复选框需要同时通过v-model 双向绑定 一个值 </span></span><br><span class="line"><span class="comment">        2、 每一个复选框必须要有value属性  且value 值不能一样 </span></span><br><span class="line"><span class="comment">		3、 当某一个单选框选中的时候 v-model  会将当前的 value值 改变 data 中的 数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		hobby 的值就是选中的值，我们只需要实时监控他的值就可以了</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ball&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;hobby&#x27;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;ball&quot;</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sing&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;hobby&#x27;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sing&quot;</span>&gt;</span>唱歌<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;code&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;hobby&#x27;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;code&quot;</span>&gt;</span>写代码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">         data: &#123;</span><br><span class="line"><span class="javascript">                <span class="comment">// 默认会让当前的 value 值为 2 和 3 的复选框选中</span></span></span><br><span class="line"><span class="javascript">                hobby: [<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>],</span></span><br><span class="line">            &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>获取下拉框和文本框中的值</p>
<ul>
<li>通过v-model</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>职业：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">			1、 需要给select  通过v-model 双向绑定 一个值 </span></span><br><span class="line"><span class="comment">            2、 每一个option  必须要有value属性  且value 值不能一样 </span></span><br><span class="line"><span class="comment">		    3、 当某一个option选中的时候 v-model  会将当前的 value值 改变 data 中的 数据</span></span><br><span class="line"><span class="comment">		     occupation 的值就是选中的值，我们只需要实时监控他的值就可以了</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- multiple  多选 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&#x27;occupation&#x27;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>请选择职业...<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>教师<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>软件工程师<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>律师<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- textarea 是 一个双标签   不需要绑定value 属性的  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&#x27;desc&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">         data: &#123;</span><br><span class="line"><span class="javascript">                <span class="comment">// 默认会让当前的 value 值为 2 和 3 的下拉框选中</span></span></span><br><span class="line"><span class="javascript">                 occupation: [<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>],</span></span><br><span class="line"><span class="javascript">             	 desc: <span class="string">&#x27;nihao&#x27;</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="表单修饰符"><a href="#表单修饰符" class="headerlink" title="表单修饰符"></a>表单修饰符</h3></li>
<li><p>.number  转换为数值</p>
<ul>
<li>注意点：    </li>
<li>当开始输入非数字的字符串时，因为Vue无法将字符串转换成数值</li>
<li>所以属性值将实时更新成相同的字符串。即使后面输入数字，也将被视作字符串。</li>
</ul>
</li>
<li><p>.trim  自动过滤用户输入的首尾空白字符</p>
<ul>
<li>只能去掉首尾的 不能去除中间的空格</li>
</ul>
</li>
<li><p>.lazy   将input事件切换成change事件</p>
<ul>
<li>.lazy 修饰符延迟了同步更新属性值的时机。即将原本绑定在 input 事件的同步逻辑转变为绑定在 change 事件上</li>
</ul>
</li>
<li><p>在失去焦点 或者 按下回车键时才更新</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动将用户的输入值转为数值类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自动过滤用户输入的首尾空白字符   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;msg&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3></li>
<li><p>内置指令不能满足我们特殊的需求</p>
</li>
<li><p>Vue允许我们自定义指令</p>
</li>
</ul>
<h4 id="Vue-directive-注册全局指令"><a href="#Vue-directive-注册全局指令" class="headerlink" title="Vue.directive  注册全局指令"></a>Vue.directive  注册全局指令</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  使用自定义的指令，只需在对用的元素中，加上&#x27;v-&#x27;的前缀形成类似于内部指令&#x27;v-if&#x27;，&#x27;v-text&#x27;的形式。 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-focus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 注意点： </span></span></span><br><span class="line"><span class="javascript"><span class="comment">//   1、 在自定义指令中  如果以驼峰命名的方式定义 如  Vue.directive(&#x27;focusA&#x27;,function()&#123;&#125;) </span></span></span><br><span class="line"><span class="javascript"><span class="comment">//   2、 在HTML中使用的时候 只能通过 v-focus-a 来使用 </span></span></span><br><span class="line">    </span><br><span class="line"><span class="javascript"><span class="comment">// 注册一个全局自定义指令 v-focus</span></span></span><br><span class="line"><span class="javascript">Vue.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">  	<span class="comment">// 当绑定元素插入到 DOM 中。 其中 el为dom元素</span></span></span><br><span class="line"><span class="javascript">  	inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    		<span class="comment">// 聚焦元素</span></span></span><br><span class="line">    		el.focus();</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">　　el:<span class="string">&#x27;#app&#x27;</span></span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Vue-directive-注册全局指令-带参数"><a href="#Vue-directive-注册全局指令-带参数" class="headerlink" title="Vue.directive  注册全局指令 带参数"></a>Vue.directive  注册全局指令 带参数</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-color</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">   /*</span><br><span class="line">     自定义指令-带参数</span><br><span class="line">     bind - 只调用一次，在指令第一次绑定到元素上时候调用</span><br><span class="line"></span><br><span class="line">   */</span><br><span class="line"><span class="javascript">   Vue.directive(<span class="string">&#x27;color&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">     <span class="comment">// bind声明周期, 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">// el 为当前自定义指令的DOM元素  </span></span></span><br><span class="line"><span class="javascript">     <span class="comment">// binding 为自定义的函数形参   通过自定义属性传递过来的值 存在 binding.value 里面</span></span></span><br><span class="line"><span class="javascript">     bind: <span class="function"><span class="keyword">function</span>(<span class="params">el, binding</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="comment">// 根据指令的参数设置背景色</span></span></span><br><span class="line"><span class="javascript">       <span class="comment">// console.log(binding.value.color)</span></span></span><br><span class="line">       el.style.backgroundColor = binding.value.color;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">     el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line">       msg: &#123;</span><br><span class="line"><span class="javascript">         color: <span class="string">&#x27;blue&#x27;</span></span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="自定义指令局部指令"><a href="#自定义指令局部指令" class="headerlink" title="自定义指令局部指令"></a>自定义指令局部指令</h4><ul>
<li>局部指令，需要定义在  directives 的选项   用法和全局用法一样 </li>
<li>局部指令只能在当前组件里面使用</li>
<li>当全局指令和局部指令同名时以局部指令为准</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-color</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-focus</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">      自定义指令-局部指令</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        msg: &#123;</span><br><span class="line"><span class="javascript">          color: <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">   	  <span class="comment">//局部指令，需要定义在  directives 的选项</span></span></span><br><span class="line">      directives: &#123;</span><br><span class="line">        color: &#123;</span><br><span class="line"><span class="javascript">          bind: <span class="function"><span class="keyword">function</span>(<span class="params">el, binding</span>)</span>&#123;</span></span><br><span class="line">            el.style.backgroundColor = binding.value.color;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        focus: &#123;</span><br><span class="line"><span class="javascript">          inserted: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span></span><br><span class="line">            el.focus();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性   computed"></a>计算属性   computed</h3><ul>
<li>模板中放入太多的逻辑会让模板过重且难以维护  使用计算属性可以让模板更加的简洁</li>
<li><strong>计算属性是基于它们的响应式依赖进行缓存的</strong></li>
<li>computed比较适合对多个变量或者对象进行处理后返回一个结果值，也就是数多个变量中的某一个值发生了变化则我们监控的这个值也就会发生变化</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">       当多次调用 reverseString  的时候 </span></span><br><span class="line"><span class="comment">       只要里面的 num 值不改变 他会把第一次计算的结果直接返回</span></span><br><span class="line"><span class="comment">	直到data 中的num值改变 计算属性才会重新发生计算</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;reverseString&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;reverseString&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 调用methods中的方法的时候  他每次会重新调用 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;reverseMessage()&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;reverseMessage()&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">   /*</span><br><span class="line">     计算属性与方法的区别:计算属性是基于依赖进行缓存的，而方法不缓存</span><br><span class="line">   */</span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">     el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">     data: &#123;</span><br><span class="line"><span class="javascript">       msg: <span class="string">&#x27;Nihao&#x27;</span>,</span></span><br><span class="line">       num: 100</span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line"><span class="javascript">       reverseMessage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">&#x27;methods&#x27;</span>)</span></span><br><span class="line"><span class="javascript">         <span class="keyword">return</span> <span class="built_in">this</span>.msg.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line"><span class="javascript">     <span class="comment">//computed  属性 定义 和 data 已经 methods 平级 </span></span></span><br><span class="line">     computed: &#123;</span><br><span class="line"><span class="javascript">       <span class="comment">//  reverseString   这个是我们自己定义的名字 </span></span></span><br><span class="line"><span class="javascript">       reverseString: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">&#x27;computed&#x27;</span>)</span></span><br><span class="line"><span class="javascript">         <span class="keyword">var</span> total = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">         <span class="comment">//  当data 中的 num 的值改变的时候  reverseString  会自动发生计算  </span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;=<span class="built_in">this</span>.num;i++)&#123;</span></span><br><span class="line">           total += i;</span><br><span class="line">         &#125;</span><br><span class="line"><span class="javascript">         <span class="comment">// 这里一定要有return 否则 调用 reverseString 的 时候无法拿到结果    </span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">return</span> total;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="侦听器-watch"><a href="#侦听器-watch" class="headerlink" title="侦听器   watch"></a>侦听器   watch</h3><ul>
<li>使用watch来响应数据的变化</li>
<li>一般用于异步或者开销较大的操作</li>
<li>watch 中的属性 一定是data 中 已经存在的数据 </li>
<li><strong>当需要监听一个对象的改变时，普通的watch方法无法监听到对象内部属性的改变，只有data中的数据才能够监听到变化，此时就需要deep属性对对象进行深度监听</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">span</span>&gt;</span>名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;firstName&#x27;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">span</span>&gt;</span>姓：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;lastName&#x27;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">       /*</span><br><span class="line">             侦听器</span><br><span class="line">           */</span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">           el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">           data: &#123;</span><br><span class="line"><span class="javascript">               firstName: <span class="string">&#x27;Jim&#x27;</span>,</span></span><br><span class="line"><span class="javascript">               lastName: <span class="string">&#x27;Green&#x27;</span>,</span></span><br><span class="line"><span class="javascript">               <span class="comment">// fullName: &#x27;Jim Green&#x27;</span></span></span><br><span class="line">           &#125;,</span><br><span class="line"><span class="javascript">            <span class="comment">//watch  属性 定义 和 data 已经 methods 平级 </span></span></span><br><span class="line">           watch: &#123;</span><br><span class="line"><span class="javascript">               <span class="comment">//   注意：  这里firstName  对应着data 中的 firstName </span></span></span><br><span class="line"><span class="javascript">               <span class="comment">//   当 firstName 值 改变的时候  会自动触发 watch</span></span></span><br><span class="line"><span class="javascript">               firstName: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                   <span class="built_in">this</span>.fullName = val + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName;</span></span><br><span class="line">               &#125;,</span><br><span class="line"><span class="javascript">               <span class="comment">//   注意：  这里 lastName 对应着data 中的 lastName </span></span></span><br><span class="line"><span class="javascript">               lastName: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                   <span class="built_in">this</span>.fullName = <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + val;</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><ul>
<li>Vue.js允许自定义过滤器，可被用于一些常见的文本格式化。</li>
<li>过滤器可以用在两个地方：双花括号插值和v-bind表达式。</li>
<li>过滤器应该被添加在JavaScript表达式的尾部，由“管道”符号指示</li>
<li>支持级联操作</li>
<li>过滤器不改变真正的<code>data</code>，而只是改变渲染的结果，并返回过滤后的版本</li>
<li>全局注册时是filter，没有s的。而局部过滤器是filters，是有s的</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- upper 被定义为接收单个参数的过滤器函数，表达式  msg  的值将作为参数传入到函数中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg | upper&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">      支持级联操作</span></span><br><span class="line"><span class="comment">      upper  被定义为接收单个参数的过滤器函数，表达式msg 的值将作为参数传入到函数中。</span></span><br><span class="line"><span class="comment">	  然后继续调用同样被定义为接收单个参数的过滤器 lower ，将upper 的结果传递到lower中</span></span><br><span class="line"><span class="comment"> 	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg | upper | lower&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:abc</span>=<span class="string">&#x27;msg | upper&#x27;</span>&gt;</span>测试数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="comment">//  lower  为全局过滤器     </span></span></span><br><span class="line"><span class="javascript">   Vue.filter(<span class="string">&#x27;lower&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> val.charAt(<span class="number">0</span>).toLowerCase() + val.slice(<span class="number">1</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        msg: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">       <span class="comment">//filters  属性 定义 和 data 已经 methods 平级 </span></span></span><br><span class="line"><span class="javascript">       <span class="comment">//  定义filters 中的过滤器为局部过滤器 </span></span></span><br><span class="line">      filters: &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">//   upper  自定义的过滤器名字 </span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//    upper 被定义为接收单个参数的过滤器函数，表达式  msg  的值将作为参数传入到函数中</span></span></span><br><span class="line"><span class="javascript">        upper: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="comment">//  过滤器中一定要有返回值 这样外界使用过滤器的时候才能拿到结果</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> val.charAt(<span class="number">0</span>).toUpperCase() + val.slice(<span class="number">1</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="过滤器中传递参数"><a href="#过滤器中传递参数" class="headerlink" title="过滤器中传递参数"></a>过滤器中传递参数</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	filterA 被定义为接收三个参数的过滤器函数。</span></span><br><span class="line"><span class="comment">			其中 message 的值作为第一个参数，</span></span><br><span class="line"><span class="comment">	普通字符串 &#x27;arg1&#x27; 作为第二个参数，表达式 arg2 的值作为第三个参数。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">      &#123;&#123; message | filterA(&#x27;arg1&#x27;, &#x27;arg2&#x27;) &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 在过滤器中 第一个参数 对应的是  管道符前面的数据   n  此时对应 message</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 第2个参数  a 对应 实参  arg1 字符串</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 第3个参数  b 对应 实参  arg2 字符串</span></span></span><br><span class="line"><span class="javascript">      Vue.filter(<span class="string">&#x27;filterA&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">n,a,b</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span>(n&lt;<span class="number">10</span>)&#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> n+a;</span></span><br><span class="line"><span class="javascript">          &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> n+b;</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">          el:<span class="string">&quot;#box&quot;</span>,</span></span><br><span class="line">          data:&#123;</span><br><span class="line"><span class="javascript">              message: <span class="string">&quot;哈哈哈&quot;</span></span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>




<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul>
<li>事物从出生到死亡的过程</li>
<li>Vue实例从创建 到销毁的过程 ，这些过程中会伴随着一些函数的自调用。我们称这些函数为钩子函数</li>
</ul>
<p>####常用的 钩子函数</p>
<table>
<thead>
<tr>
<th>beforeCreate</th>
<th>在实例初始化之后，数据观测和事件配置之前被调用 此时data 和 methods 以及页面的DOM结构都没有初始化   什么都做不了</th>
</tr>
</thead>
<tbody><tr>
<td>created</td>
<td>在实例创建完成后被立即调用此时data 和 methods已经可以使用  但是页面还没有渲染出来</td>
</tr>
<tr>
<td>beforeMount</td>
<td>在挂载开始之前被调用   此时页面上还看不到真实数据 只是一个模板页面而已</td>
</tr>
<tr>
<td>mounted</td>
<td>el被新创建的vm.$el替换，并挂载到实例上去之后调用该钩子。  数据已经真实渲染到页面上  在这个钩子函数里面我们可以使用一些第三方的插件</td>
</tr>
<tr>
<td>beforeUpdate</td>
<td>数据更新时调用，发生在虚拟DOM打补丁之前。   页面上数据还是旧的</td>
</tr>
<tr>
<td>updated</td>
<td>由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩子。 页面上数据已经替换成最新的</td>
</tr>
<tr>
<td>beforeDestroy</td>
<td>实例销毁之前调用</td>
</tr>
<tr>
<td>destroyed</td>
<td>实例销毁后调用</td>
</tr>
</tbody></table>
<h3 id="数组变异方法"><a href="#数组变异方法" class="headerlink" title="数组变异方法"></a>数组变异方法</h3><ul>
<li>在 Vue 中，直接修改对象属性的值无法触发响应式。当你直接修改了对象属性的值，你会发现，只有数据改了，但是页面内容并没有改变</li>
<li>变异数组方法即保持数组方法原有功能不变的前提下对其进行功能拓展</li>
</ul>
<table>
<thead>
<tr>
<th><code>push()</code></th>
<th>往数组最后面添加一个元素，成功返回当前数组的长度</th>
</tr>
</thead>
<tbody><tr>
<td><code>pop()</code></td>
<td>删除数组的最后一个元素，成功返回删除元素的值</td>
</tr>
<tr>
<td><code>shift()</code></td>
<td>删除数组的第一个元素，成功返回删除元素的值</td>
</tr>
<tr>
<td><code>unshift()</code></td>
<td>往数组最前面添加一个元素，成功返回当前数组的长度</td>
</tr>
<tr>
<td><code>splice()</code></td>
<td>有三个参数，第一个是想要删除的元素的下标（必选），第二个是想要删除的个数（必选），第三个是删除 后想要在原位置替换的值</td>
</tr>
<tr>
<td><code>sort()</code></td>
<td>sort()  使数组按照字符编码默认从小到大排序,成功返回排序后的数组</td>
</tr>
<tr>
<td><code>reverse()</code></td>
<td>reverse()  将数组倒序，成功返回倒序后的数组</td>
</tr>
</tbody></table>
<h3 id="替换数组"><a href="#替换数组" class="headerlink" title="替换数组"></a>替换数组</h3><ul>
<li>不会改变原始数组，但总是返回一个新数组</li>
</ul>
<table>
<thead>
<tr>
<th>filter</th>
<th>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</th>
</tr>
</thead>
<tbody><tr>
<td>concat</td>
<td>concat() 方法用于连接两个或多个数组。该方法不会改变现有的数组</td>
</tr>
<tr>
<td>slice</td>
<td>slice() 方法可从已有的数组中返回选定的元素。该方法并不会修改数组，而是返回一个子数组</td>
</tr>
</tbody></table>
<h3 id="动态数组响应式数据"><a href="#动态数组响应式数据" class="headerlink" title="动态数组响应式数据"></a>动态数组响应式数据</h3><ul>
<li>Vue.set(a,b,c)    让 触发视图重新更新一遍，数据动态起来</li>
<li>a是要更改的数据 、   b是数据的第几项、   c是更改后的数据</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>基于C语言的学生成绩管理系统</title>
    <url>/2019/02/02/C-student-info-manage/</url>
    <content><![CDATA[<h2 id="基于C语言的学生信息管理系统"><a href="#基于C语言的学生信息管理系统" class="headerlink" title="基于C语言的学生信息管理系统"></a>基于C语言的学生信息管理系统</h2><a id="more"></a>
<h2 id="一、系统需求与功能分析"><a href="#一、系统需求与功能分析" class="headerlink" title="一、系统需求与功能分析"></a>一、系统需求与功能分析</h2><p>1.1 系统需求分析<br>(1) 能完成学生信息的录入，插入、修改、删除、输出、查询等功能；<br>(2)采用单链表存储结构实现；<br>(3) 所有数据以外部文件方式保存。<br>1.2系统功能分析<br>(1)要设计一个学生信息管理系统，其功能包括：<br>①录入函数Add()：将学生信息按尾插法插入到链表中；<br>②插入函数Insert()：根据所给学号作为插入位置，在其后插入信息；<br>③修改函数Modify()：修改指定的学生信息；<br>④删除函数Delete()：当需要删除的学号和姓名一致时则删除对应的学生记录；<br>⑤输出函数Show()：显示全部学生信息；<br>⑥查询函数Search()：分别可以按学号和按姓名进行学生信息查询；<br>⑦菜单函数Menu()：为程序的菜单函数为实现各种功能提供便捷；<br>⑧读取数据函数Read()：从外部文件读取学生信息信息；<br>⑨保存数据函数Save()：将数据保存到外部文件中。<br>(2)线性表的链接存储结构称为单链表，单链表使用一组任意的存储单元存放线性表的元素，这组存储单元可以连续也可以不连续，甚至可以零散分布在内存中的任意位置。为了正确表示元素之间逻辑关系，每个存储单元在存储数据元素的同时，还必须存储其后继元素所在地址信息，这个地址信息称为指针，这两部分组成了数据元素的存储映像，称为结点，结点结构如图1.1所示。</p>
<p>图1.1单链表的结点构造<br> 设p是一个指针变量，则p的值是一个指针。设指针p指向某个结点，则该结点用*p表示，在单链表中，结点p由两个域组成：存放数据元素的部分和存放后继结点地址的指针部分，分别用p-&gt;data和p-&gt;next来标识，p-&gt;next指向结点ai+1，其指针与结点之间关系如图1.2所示。</p>
<p>图1.2指针与结点之间关系的示意图<br>1.3系统性能分析<br>1．硬件环境<br>处理器：CPU主频在500MHz以上<br>内存：128MB以上<br>硬盘空间：10MB。<br>2．软件环境<br>操作系统: Windows 98/Me/NT/2000/XP(推荐使用Windows 2000/XP)。<br>调试环境: Visual C++及以上版本。</p>
<h2 id="二、总体结构设计"><a href="#二、总体结构设计" class="headerlink" title="二、总体结构设计"></a>二、总体结构设计</h2><p>2.1系统的结构设计<br>通过对学生信息管理系统的功能分析，可以定义出系统的总体结构模块图，如图2.1所示。</p>
<p>图2.1学生信息管理系统总体结构设计<br>2.2系统管理流程图<br>  前面的分析中已经定义了系统各个模块，属于静态建模的范围。在系统运行时刻的动态模型应该由系统的流程决定。当用户运行该系统后可以来进行学生信息信息（录入）插入管理、学生信息修改管理、学生信息删除管理、学生信息显示管理及学生信息显示等操作，具体的流程如图2.2所示。</p>
<p>图2.2系统流程图<br>主模块应负责应用程序的主界面，由它调用其他模块.因此主模块应具有操作性好、界面清晰的特点，使用户能够很方便地找到所需功能。<br>根据功能需求的结果分析，主界面应该由学生信息录入管理，学生信息插入管理，学生信息修改管理、学生信息删除管理、学生信息显示管理和学生信息信息查询管理组成，可以通过输入相应的数字进入相应的功能模块。</p>
<p>三、 系统详细设计和系统实现<br>系统总体设计完成后，就可以根据需求对各个模块来进行实现了。在本系统中需要编码实现的主要有学生信息信息插入、学生信息信息查询、学生信息信息修改、学生信息信息删除和学生信息信息输出等5个模块。<br>(1)学生信息录入模块<br>添加的信息包括姓名(允许重复)、学号(不允许重复)、年龄、性别、宿舍地址、计算机成绩、数学成绩和英语成绩。流程图如下图3.1所示。</p>
<p>图3.1录入模块流程图<br>本程序采用的是尾插法，就是每次将新申请的结点插在终端结点的后面，其执行过程如图3.12所示。</p>
<p>图3.12尾插法建立单链表操作示意图<br>(2)学生信息插入模块<br>输入一个存在的学号作为插入位置，在其后插入的信息包括姓名、学号、年龄、性别、宿舍地址、计算机成绩、数学成绩和英语成绩。流程图如下图3.2所示。</p>
<p>图3.2插入模块流程图<br>本程序采用的是尾插法，就是每次将新申请的结点插在终端结点的后面，其执行过程如图3.22所示。</p>
<p>图3.22 尾插法插入操作示意图</p>
<p>(3)学生信息修改模块<br>首先要查找与要修改数据相匹配的信息，若没有则返回失败。否则把相应的信息输出，然后再重新输入新的数据并保存到单链表。</p>
<p>(4)学生信息删除模块<br>当选择删除功能时，首先输入要删除的同学的姓名，然后输入要删除的同学的学号，如果该同学存在并且姓名与学号匹配的上，则进行删除操作，否则返回失败。其流程图3.4如下：</p>
<p>图3.4删除学生信息模块流程图<br>删除操作定义为将单链表的第i个结点删去。因为在单链表中结点ai存储地址在其前驱结点ai-1的指针域，所以必须首先找到ai-1的存储地址p，然后令p的next域指向ai 的后继结点，即把结点ai 从链上摘下来，最后释放结点ai的存储空间，如图3.42所示。 </p>
<p>图3.42在单链表中删除结点指针的变化情况</p>
<p>(5)学生信息显示模块<br>从单链表表头遍历整个单链表，将所有数据输出。其部分代码如下：</p>
<pre><code> void Function::Show()        
&#123;    
    Student *temp;
    system(&quot;cls&quot;);
    temp=Student_First-&gt;Next;         
    if(!temp)                  
    &#123;    cout&lt;&lt;&quot;文件无数据\n\n &quot;&lt;&lt;endl;
        cout&lt;&lt;&quot;按任意键返回主菜单&quot;&lt;&lt;endl;
        getch();
         
        Menu();           
    &#125;
    else
    &#123;cout&lt;&lt;&quot;姓名\t学号\t\t年龄\t性别\t宿舍住址\t  计算机   数学   英语\n&quot;;
        while(temp!=NULL)
        &#123;     temp-&gt;Out();
            temp=temp-&gt;Next;                     
        &#125;
    &#125;
    cout&lt;&lt;endl&lt;&lt;&quot;按任意键返回主菜单&quot;&lt;&lt;endl;
    getch();
    
    Menu();                      
&#125; 
</code></pre>
<p>(6)学生信息查询模块<br>按姓名和学号查找学生信息的流程图分别如下图3.6所示。</p>
<p>图3.6按姓名或学号查找学生信息信息流程图<br>在单链表中，即使知道被访问结点的位置i，也不能像顺序表那样直接按序号访问，而只能从头指针出发，设置一个工作指针p，顺next域逐个结点往下搜索。当p指向某个结点时判断是否为第i个结点，若是则查找成功；否则，将工作指针p后移，即将p指向原来所指结点的后继结点。直到p为NULL时查找失败。单链表查找过程如图3.62所示。</p>
<p>图3.62单链表查找过程的示意图</p>
<p>四、 系统测试<br>在完成了系统各方面的设计后，并不是可以运行就完成的，为了保证系统性能的稳定性跟安全性等，就要对系统做测试。<br>测试环境如下：<br>    硬件:联想ThinkPad 2.4GHz，500GB硬盘，4G内存；<br>    软件:Windows 7 Personal SP1，分辨率1366*768，Microsoft Visual C++ 6.0。</p>
<p>在对系统功能进行逐一测试的时候，遇到了一些问题，例如，因为把学号定义为整形（int），在输入以0为开头的学号时，系统会自动把0去掉，这样学号的信息就丢失了第一位。为了解决这个问题，将学号改成了 字符型(char)，这样在构造函数里也需要把学号的初始化用 字符串拷贝（strcpy）来实现。<br>遇到的问题还有很多，例如数据出错，内存溢出等，经过反复测试，调试和努力修正，程序得以完善。<br>下面为源码：</p>
<pre><code>// 程序名称：Student.cpp 
// 程序功能：采用链表与文件实现一个简单的学生成绩管理系统。

#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include&lt;cstring&gt;
#include&lt;conio.h&gt;
#include&lt;windows.h&gt;
#include &lt;ctime&gt;
using namespace std;
struct Class
&#123;   int Computer;
    int Math;
    int English;
&#125;;
class Student&#123;
public:
    Student();
    void Ofile(ofstream &amp;of);                 
    void Infile(ifstream &amp;f);                
    void Out();                                                 
    void Set(char *name,char *no,int age,char *sex,char *add,Class score);
    char *GetName();                        
    char * GetNo();                         
    Student *Next;                           
protected:
    char Name[20];                          
    char No[20];    
    int Age;
    char Sex[20];
    char Add[40];
    Class Score ;
&#125;;
Student::Student():Next(0)&#123;&#125;                   
char *Student::GetName()&#123;return Name;&#125;        
char *Student::GetNo()&#123;return No;&#125;
void Student::Set(char *name,char *no,int age,char *sex,char *add,Class score)
&#123;    strcpy(Name,name);
    strcpy(No,no);
    Age=age;
    strcpy(Sex,sex);
    strcpy(Add,add);
    Score=score;
&#125;
void Student::Infile(ifstream &amp;f)
&#123;    f&gt;&gt;Name&gt;&gt;No&gt;&gt;Age&gt;&gt;Sex&gt;&gt;Add&gt;&gt;Score.Computer&gt;&gt;Score.Math&gt;&gt;Score.English;    //将数据输入到文件                
&#125;
void Student::Ofile(ofstream &amp;of)
&#123;    of&lt;&lt;&quot; &quot;&lt;&lt;Name&lt;&lt;&quot; &quot;&lt;&lt;No&lt;&lt;&quot; &quot;&lt;&lt;Age&lt;&lt;&quot; &quot;&lt;&lt;Sex&lt;&lt;&quot; &quot;&lt;&lt;Add&lt;&lt;&quot; &quot;&lt;&lt;Score.Computer&lt;&lt;&quot; &quot;&lt;&lt;Score.Math&lt;&lt;&quot; &quot;&lt;&lt;Score.English;          //从文件中提取数据
&#125;
void Student::Out()
&#123; 
    cout&lt;&lt;&quot;-------------------------------------------------------------------------------&quot;&lt;&lt;endl;
    cout&lt;&lt;Name&lt;&lt;&quot;\t&quot;&lt;&lt;No&lt;&lt;&quot;\t&quot;&lt;&lt;Age&lt;&lt;&quot;\t&quot;&lt;&lt;Sex&lt;&lt;&quot;\t&quot;&lt;&lt;Add&lt;&lt;&quot;\t  &quot;&lt;&lt;Score.Computer&lt;&lt;&quot;\t   &quot;&lt;&lt;Score.Math&lt;&lt;&quot;\t  &quot;&lt;&lt;Score.English&lt;&lt;endl; 
&#125;
class Function                             //功能类                   
&#123;
public:
    Function();                            //构造函数
    ~Function();                          //析构函数
    void Menu();                          //菜单函数
    void Add();                           //录入学生信息函数
    void Insert();                          //插入学生信息函数
    void Modify();                          //修改学生信息函数
    void Delete();                         //删除学生信息函数                         
    void Show();                           //显示学生信息函数
    void Search();                        //查询学生信息函数
    
private:
    Student *Student_First;                         
    void Read();                           //读取学生信息函数
    void Save();                           //保存学生信息函数
&#125;;
Function::Function()
&#123;    Student_First=new Student;                             
    Read();
&#125;  
Function::~Function()
&#123;    delete Student_First;            
&#125;
void Function::Add()                           //录入学生信息函数
&#123;    char name[20];
    char no[20]; 
    int age;
    char sex[20];
    char add[100];
    Class score;
    char choose;                            
    Student *f1,*p,*f2;                         
    system(&quot;cls&quot;);
    f1=Student_First;
    f2=Student_First-&gt;Next;
    while(f1-&gt;Next)
        f1=f1-&gt;Next;                  
    do
    &#123;  p=new Student;
        cout&lt;&lt;&quot;请输入您要添加的学生成绩信息:&quot;&lt;&lt;endl;
        cout&lt;&lt;&quot;请输入学生姓名: &quot;;
        cin&gt;&gt;name;
        cout&lt;&lt;&quot;请输入学号: &quot;;
        cin&gt;&gt;no;
        while(f2)
        &#123;    if(strcmp(f2-&gt;GetNo(),no)==0)
            &#123;    cout&lt;&lt;&quot;该学生已存在，请确定学号!\n\n&quot;;
            cout&lt;&lt;&quot;1.返回主菜单\n2.继续添加 ------- &quot;;
            cin&gt;&gt;choose;
            while(choose!=&#39;1&#39;&amp;&amp;choose!=&#39;2&#39;)
            &#123;        cout&lt;&lt;&quot;1.返回主菜单\n2.继续添加 ------- &quot;;
                     cin&gt;&gt;choose;
            &#125;
            if(choose==&#39;1&#39;)
            Menu();
            else if(choose==&#39;2&#39;)

                Add();
            &#125;
            f2=f2-&gt;Next;
        &#125;
        
        cout&lt;&lt;&quot;请输入年龄: &quot;;
        cin&gt;&gt;age;
        cout&lt;&lt;&quot;请输入性别: &quot;;
        cin&gt;&gt;sex;
        cout&lt;&lt;&quot;请输入宿舍地址: &quot;;
        cin&gt;&gt;add;

        cout&lt;&lt;&quot;请输入计算机成绩: &quot;;
       cin&gt;&gt;score.Computer;
        cout&lt;&lt;&quot;请输入数学成绩: &quot;;
       cin&gt;&gt;score.Math;
        cout&lt;&lt;&quot;请输入英语成绩: &quot;;
        cin&gt;&gt;score.English;
        p-&gt;Set(name,no,age,sex,add,score);
        f1-&gt;Next=p;                  
        p-&gt;Next=NULL;
        f1=f1-&gt;Next;
        cout&lt;&lt;&quot;是否继续输入信息?(Y\\N) ------- &quot;;
        cin&gt;&gt;choose;
        &#125;while(choose==&#39;y&#39;||choose==&#39;Y&#39;);
    Save();
    Menu();
&#125;

void Function::Insert()  
&#123;
    char name[20];
    char no[20]; 
    int age;
    char sex[20];
    char add[100];
    Class score;
    int flag(0);
    Student *f1,*p;                         
    system(&quot;cls&quot;);
    f1=Student_First;
                        
    
     p=new Student;
        cout&lt;&lt;&quot;请输入学号来确定插入位置:&quot;&lt;&lt;endl;
        cin&gt;&gt;no;
        while(f1)
            &#123;    if(strcmp(f1-&gt;GetNo(),no)==0)        
                &#123;    flag=1;                    
                    break;
                &#125;
                f1=f1-&gt;Next;         
            &#125;
                if(flag==0)
            &#123;
                cout&lt;&lt;&quot;\n无该学生的信息,程序将返回主菜单\n&quot;&lt;&lt;endl;
                Sleep(2000);
                Menu();
            &#125;

            else
            &#123;    
            cout&lt;&lt;&quot;请输入学生姓名: &quot;;
            cin&gt;&gt;name;
            cout&lt;&lt;&quot;请输入学号: &quot;;
            cin&gt;&gt;no;
            cout&lt;&lt;&quot;请输入年龄: &quot;;
            cin&gt;&gt;age;
            cout&lt;&lt;&quot;请输入性别: &quot;;
            cin&gt;&gt;sex;
            cout&lt;&lt;&quot;请输入宿舍地址: &quot;;
            cin&gt;&gt;add;

            cout&lt;&lt;&quot;请输入计算机成绩: &quot;;
             cin&gt;&gt;score.Computer;
            cout&lt;&lt;&quot;请输入数学成绩: &quot;;
             cin&gt;&gt;score.Math;
            cout&lt;&lt;&quot;请输入英语成绩: &quot;;
            cin&gt;&gt;score.English;
            p-&gt;Set(name,no,age,sex,add,score);
            &#125;
                          
        p-&gt;Next=f1-&gt;Next;
        f1-&gt;Next=p;
        Save();
        cout&lt;&lt;&quot;插入成功! &quot;;
        Sleep(1500);
    
    Menu();
&#125;

void Function::Modify()                 //修改学生信息函数
&#123;    
    int flag(0);
    char choose,name[20];               
    Student *temp,*p;                           
    char no[20];
    int age;
    char sex[20];
    char add[100];
    Class score;
    system(&quot;cls&quot;);
    temp=p=Student_First;
    cout&lt;&lt;&quot;输入修改方式：\n1.按姓名修改\n2.按学号修改 ------- &quot;;
        cin&gt;&gt;choose;
        if(choose==&#39;1&#39;)
        &#123;    
            cout&lt;&lt;&quot;请输入您要修改的姓名:\n  &quot;;
            cin&gt;&gt;name;
    while(temp)
    &#123;    if(strcmp(temp-&gt;GetName(),name)==0)          
        &#123;
            flag=1;
            cout&lt;&lt;&quot;\n姓名\t学号\t\t年龄\t性别\t宿舍住址\t  计算机   数学   英语\n&quot;;
            temp-&gt;Out();
            cout&lt;&lt;&quot;请输入姓名: &quot;;
             cin&gt;&gt;name;                                   
            cout&lt;&lt;&quot;请输入学号: &quot;;
            cin&gt;&gt;no;
            cout&lt;&lt;&quot;请输入年龄: &quot;;
            cin&gt;&gt;age;
            cout&lt;&lt;&quot;请输入性别: &quot;;
            cin&gt;&gt;sex;
            cout&lt;&lt;&quot;请输入宿舍地址: &quot;;
            cin&gt;&gt;add;
            cout&lt;&lt;&quot;请输入计算机成绩: &quot;;
            cin&gt;&gt;score.Computer;                                       
            cout&lt;&lt;&quot;请输入数学成绩: &quot;;
             cin&gt;&gt;score.Math;
            cout&lt;&lt;&quot;请输入英语成绩: &quot;;
            cin&gt;&gt;score.English;
            temp-&gt;Set(name,no,age,sex,add,score);
            
            break;
        &#125;
        temp=temp-&gt;Next;  
            
    &#125;
    &#125;
        else if(choose==&#39;2&#39;)
        &#123;    
            cout&lt;&lt;&quot;请输入您要修改的学号: &quot;;
            cin&gt;&gt;no;
            while(temp)
            &#123;    if(strcmp(temp-&gt;GetNo(),no)==0)        
                &#123;    
                    flag=1;
                    cout&lt;&lt;&quot;\n姓名\t学号\t\t年龄\t性别\t宿舍住址\t  计算机   数学   英语\n&quot;;
                    temp-&gt;Out();
                    cout&lt;&lt;endl;
                    cout&lt;&lt;&quot;请输入姓名: &quot;;
                     cin&gt;&gt;name;                                   
                    cout&lt;&lt;&quot;请输入学号: &quot;;
                    cin&gt;&gt;no;
                    cout&lt;&lt;&quot;请输入年龄: &quot;;
                    cin&gt;&gt;age;
                    cout&lt;&lt;&quot;请输入性别: &quot;;
                    cin&gt;&gt;sex;
                    cout&lt;&lt;&quot;请输入宿舍地址: &quot;;
                    cin&gt;&gt;add;
                    cout&lt;&lt;&quot;请输入计算机成绩: &quot;;
                    cin&gt;&gt;score.Computer;                                       
                    cout&lt;&lt;&quot;请输入数学成绩: &quot;;
                     cin&gt;&gt;score.Math;
                    cout&lt;&lt;&quot;请输入英语成绩: &quot;;
                    cin&gt;&gt;score.English;
                    temp-&gt;Set(name,no,age,sex,add,score);
            
                    break;
                &#125;
                temp=temp-&gt;Next;        
            
        &#125;        
    &#125;
if(flag==0)
    cout&lt;&lt;&quot;\n无该学生的信息\n&quot;&lt;&lt;endl;
else
&#123;
    Save();
    cout&lt;&lt;&quot;修改成功!&quot;&lt;&lt;endl;
&#125;

    cout&lt;&lt;&quot;1.返回主菜单\n2.继续修改 ------- &quot;;
    cin&gt;&gt;choose;
    while(choose!=&#39;1&#39;&amp;&amp;choose!=&#39;2&#39;)
    &#123;     cout&lt;&lt;&quot;1.返回主菜单\n2.继续修改 ------- &quot;;
        cin&gt;&gt;choose;
    &#125;
    if(choose==&#39;1&#39;)
        Menu();
    else if(choose==&#39;2&#39;)
        Modify();
&#125;

void Function::Delete()           //删除学生信息函数
&#123;     char name[20];               
    char no[20];
    char choose;
    Student *temp,*p;
    system(&quot;cls&quot;);
    p=temp=Student_First-&gt;Next;
    cout&lt;&lt;&quot;请输入姓名: &quot;;
    cin&gt;&gt;name;
    cout&lt;&lt;&quot;输入学号: &quot;;
    cin&gt;&gt;no;
    while(temp)
    &#123; if(strcmp(temp-&gt;GetName(),name)==0&amp;&amp;strcmp(temp-&gt;GetNo(),no)==0)  //判断该学生信息是否存在
        &#123;      cout&lt;&lt;&quot;姓名\t学号\t\t年龄\t性别\t宿舍住址\t  计算机   数学   英语\n&quot;;
               temp-&gt;Out();
               cout&lt;&lt;&quot;\n是否删除(Y/N) -------&quot;;
              cin&gt;&gt;choose;
            if(choose==&#39;y&#39;||choose==&#39;Y&#39;)
            &#123;    p-&gt;Next=p-&gt;Next-&gt;Next;
                delete temp;
                cout&lt;&lt;&quot;删除成功:\n&quot;;
            &#125;
               break;                    
        &#125;
        p=temp;
        temp=temp-&gt;Next; 
    &#125;
    Save();                                     
    cout&lt;&lt;&quot;1.返回主菜单\n2.继续删除 ------- &quot;;
    cin&gt;&gt;choose;                              
    while(choose!=&#39;1&#39;&amp;&amp;choose!=&#39;2&#39;)
    &#123;    cout&lt;&lt;&quot;1.返回主菜单\n2.继续删除 ------- &quot;;
        cin&gt;&gt;choose;
    &#125;
    if(choose==&#39;1&#39;)
        Menu();                               
    else if(choose==&#39;2&#39;)
        Delete();                    
&#125;

void Function::Read()                       //读取学生信息函数
&#123;    Student *p,*p2;
    p=Student_First;                            
    ifstream is(&quot;Student.txt&quot;,ios::in);         
    if(!is)                             
    &#123;   ofstream os(&quot;Student.txt&quot;,ios::out);     
        os.close();                        
        return ;
    &#125;
    while(!is.eof())
    &#123;   p2=new Student;                   
        p2-&gt;Infile(is);
        p-&gt;Next=p2;                      
        p2-&gt;Next=NULL;                  
         p=p-&gt;Next;
    &#125;
&#125;
void Function::Save()                                 //保存学生信息函数
&#123;    ofstream of(&quot;Student.txt&quot;,ios::out);         
    Student *p=Student_First-&gt;Next;                      
    while(p)
    &#123;    p-&gt;Ofile(of);                       
        p=p-&gt;Next;                      
    &#125;
    of.close();
&#125;
void Function::Search()                       
&#123;    int flag(0);                           
    char choose;                          
    char t1[20];
    char t2[20];
    system(&quot;cls&quot;);
    Student *temp=Student_First-&gt;Next;            
    do
    &#123;   cout&lt;&lt;&quot;输入查询方式：\n1.按姓名查询\n2.按学号查询 ------- &quot;;
        cin&gt;&gt;choose;
        if(choose==&#39;1&#39;)
        &#123;    cout&lt;&lt;&quot;请输入您要查询的姓名:&quot;;
            cin&gt;&gt;t1;    
            while(temp)
            &#123;    if(strcmp(t1,temp-&gt;GetName())==0)        
                &#123;    flag=1;    
                    break;
                &#125;
                temp=temp-&gt;Next;         
            &#125;
            if(flag==0)
                cout&lt;&lt;&quot;\n无该学生的信息\n&quot;&lt;&lt;endl;
            else
            &#123;    
                cout&lt;&lt;&quot;\n&quot;;
                cout&lt;&lt;&quot;姓名\t学号\t\t年龄\t性别\t宿舍住址\t  计算机   数学   英语\n&quot;;
                temp-&gt;Out();
            &#125;
            break;
        &#125;
        else if(choose==&#39;2&#39;)
        &#123;    cout&lt;&lt;&quot;请输入您要查询的学号 ------- &quot;;
            cin&gt;&gt;t2;
            while(temp)
            &#123;    if(strcmp(t2,temp-&gt;GetNo())==0)        
                &#123;    flag=1;                    
                    break;
                &#125;
                temp=temp-&gt;Next;         
            &#125;
            if(flag==0)
                cout&lt;&lt;&quot;\n无该学生的信息\n&quot;&lt;&lt;endl;
            else
            &#123;    
                cout&lt;&lt;&quot;\n&quot;;
                cout&lt;&lt;&quot;姓名\t学号\t\t年龄\t性别\t宿舍住址\t  计算机   数学   英语\n&quot;;
                temp-&gt;Out();
             &#125;
            break;
        &#125;
    &#125;while(choose!=&#39;1&#39;||choose!=&#39;2&#39;);
    cout&lt;&lt;&quot;\n1.返回主菜单\n2.继续查询 ------- &quot;;
    cin&gt;&gt;choose;
    while(choose!=&#39;1&#39;&amp;&amp;choose!=&#39;2&#39;)
    &#123;    cout&lt;&lt;&quot;1.返回主菜单\n2.继续查询 ------- &quot;;
        cin&gt;&gt;choose;
    &#125;
    if(choose==&#39;1&#39;)
        Menu();               
    else if(choose==&#39;2&#39;)
         Search();               
&#125;
void Function::Show()        
&#123;    
    Student *temp;
    system(&quot;cls&quot;);
    temp=Student_First-&gt;Next;         
    if(!temp)                  
    &#123;    cout&lt;&lt;&quot;文件无数据\n\n &quot;&lt;&lt;endl;
        cout&lt;&lt;&quot;按任意键返回主菜单&quot;&lt;&lt;endl;
        getch();
         
        Menu();           
    &#125;
    else
    &#123;    cout&lt;&lt;&quot;姓名\t学号\t\t年龄\t性别\t宿舍住址\t  计算机   数学   英语\n&quot;;
        while(temp!=NULL)
        &#123;     temp-&gt;Out();
            temp=temp-&gt;Next;                     
        &#125;
    &#125;
    cout&lt;&lt;endl&lt;&lt;&quot;按任意键返回主菜单&quot;&lt;&lt;endl;
    getch();
    
    Menu();                      
&#125;
void Function::Menu()
&#123;   system(&quot;color F9&quot;);
    time_t t;
    time(&amp;t);
    char choose;               
    system(&quot;cls&quot;);    

    cout&lt;&lt;endl;
    cout&lt;&lt;&quot;\t※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※&quot;&lt;&lt;endl;
    cout&lt;&lt;&quot;\t                        西安科技大学欢迎您                 &quot;&lt;&lt;endl&lt;&lt;endl; 
    cout&lt;&lt;&quot;\t                  学生信息管理系统                    &quot;&lt;&lt;endl&lt;&lt;endl; 
    cout&lt;&lt;&quot;\t     当前系统时间: &quot;&lt;&lt;ctime(&amp;t)&lt;&lt;&quot;&quot;&lt;&lt;endl;
    cout&lt;&lt;&quot;\t                                            版权所有：李晋旭 杨凯文&quot;&lt;&lt;endl; 
    cout&lt;&lt;&quot;\t※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※&quot;&lt;&lt;endl&lt;&lt;endl;
    cout&lt;&lt;&quot;请按键选择需要的操作 （请输入数字）&quot;&lt;&lt;endl;
    cout&lt;&lt;&quot;\n&quot;;

    cout&lt;&lt;&quot;  ╭--------------------------------------╮&quot;&lt;&lt;endl;
      cout&lt;&lt;&quot; │          1 录入学生信息:               │&quot;&lt;&lt;endl;
    cout&lt;&lt;&quot; │          2 插入学生信息:               │&quot;&lt;&lt;endl;
    cout&lt;&lt;&quot; │          3 修改学生信息:               │&quot;&lt;&lt;endl;
    cout&lt;&lt;&quot; │          4 删除学生信息:               │&quot;&lt;&lt;endl;
    cout&lt;&lt;&quot; │          5 显示全部学生信息:           │&quot;&lt;&lt;endl;
    cout&lt;&lt;&quot; │          6 查找学生信息:               │&quot;&lt;&lt;endl;
    cout&lt;&lt;&quot; │          7 退出系统:                   │&quot;&lt;&lt;endl;
    cout&lt;&lt;&quot; ╰----------------------------------------╯&quot;&lt;&lt;endl;
    cout&lt;&lt;&quot;\n&quot;;
    cin&gt;&gt;choose;
    switch(choose)
&#123;    case &#39;1&#39;: Add();break;                 
    case &#39;2&#39;: Insert();break;
    case &#39;3&#39;: Modify();break;
    case &#39;4&#39;: Delete();break;
    case &#39;5&#39;: Show();break;
    case &#39;6&#39;: Search();break;
    case &#39;7&#39;: exit(1);break;    
    default:
        &#123;    cout&lt;&lt;&quot;请按规定输入选择项!&quot;&lt;&lt;endl;
            Sleep(1500);
            Menu();
        &#125;
    &#125;
&#125;
int main()
&#123;    Function function;          //定义功能接口
    function.Menu();            //调用主菜单
&#125;                                       
</code></pre>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>学习jquery</title>
    <url>/2020/11/02/%E5%AD%A6%E4%B9%A0jquery/</url>
    <content><![CDATA[<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><a id="more"></a>
<blockquote>
<p>学习目标：</p>
<p>4种常见的注册事件<br>on 绑定事件的优势<br>jQuery 事件委派的优点以及方式<br>绑定事件与解绑事件<br>jQuery 对象的拷贝方法<br>jQuery 多库共存的2种方法<br>jQuery 插件</p>
</blockquote>
<h2 id="1-1-jQuery-事件注册"><a href="#1-1-jQuery-事件注册" class="headerlink" title="1.1. jQuery 事件注册"></a>1.1. jQuery 事件注册</h2><p>​    jQuery 为我们提供了方便的事件注册机制，是开发人员抑郁操作优缺点如下：</p>
<ul>
<li>优点: 操作简单，且不用担心事件覆盖等问题。</li>
<li>缺点: 普通的事件注册不能做事件委托，且无法实现事件解绑，需要借助其他方法。</li>
</ul>
<p><strong>语法</strong></p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-tcZGZd2N-1606456063532)(images/register.png)]</p>
<p><strong>演示代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 1. 单个事件注册</span></span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="built_in">this</span>).css(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;purple&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).mouseenter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="built_in">this</span>).css(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;skyblue&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="1-2-jQuery-事件处理"><a href="#1-2-jQuery-事件处理" class="headerlink" title="1.2. jQuery 事件处理"></a>1.2. jQuery 事件处理</h2><p>​    因为普通注册事件方法的不足，jQuery又开发了多个处理方法，重点讲解如下：</p>
<ul>
<li>on(): 用于事件绑定，目前最好用的事件绑定方法</li>
<li>off(): 事件解绑</li>
<li>trigger() / triggerHandler(): 事件触发</li>
</ul>
<h3 id="1-2-1-事件处理-on-绑定事件"><a href="#1-2-1-事件处理-on-绑定事件" class="headerlink" title="1.2.1 事件处理 on() 绑定事件"></a>1.2.1 事件处理 on() 绑定事件</h3><p>​    因为普通注册事件方法的不足，jQuery又创建了多个新的事件绑定方法bind() / live() / delegate() / on()等，其中最好用的是: on()</p>
<p><strong>语法</strong></p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-2SBC8geC-1606456063536)(images/on1.png)]</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-4KbS4VyL-1606456063538)(images/on2.png)]</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-8SjncUKB-1606456063540)(images/on3.png)]</p>
<p><strong>演示代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;ol&gt;&lt;/ol&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// (1) on可以绑定1个或者多个事件处理程序</span></span><br><span class="line">            <span class="comment">// $(&quot;div&quot;).on(&#123;</span></span><br><span class="line">            <span class="comment">//     mouseenter: function() &#123;</span></span><br><span class="line">            <span class="comment">//         $(this).css(&quot;background&quot;, &quot;skyblue&quot;);</span></span><br><span class="line">            <span class="comment">//     &#125;,</span></span><br><span class="line">            <span class="comment">//     click: function() &#123;</span></span><br><span class="line">            <span class="comment">//         $(this).css(&quot;background&quot;, &quot;purple&quot;);</span></span><br><span class="line">            <span class="comment">//     &#125;</span></span><br><span class="line">            <span class="comment">// &#125;);</span></span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).on(<span class="string">&quot;mouseenter mouseleave&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="built_in">this</span>).toggleClass(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// (2) on可以实现事件委托（委派）</span></span><br><span class="line">            <span class="comment">// click 是绑定在ul 身上的，但是 触发的对象是 ul 里面的小li</span></span><br><span class="line">            <span class="comment">// $(&quot;ul li&quot;).click();</span></span><br><span class="line">            $(<span class="string">&quot;ul&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;li&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="number">11</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// (3) on可以给未来动态创建的元素绑定事件</span></span><br><span class="line">            $(<span class="string">&quot;ol&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;li&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="number">11</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">var</span> li = $(<span class="string">&quot;&lt;li&gt;我是后来创建的&lt;/li&gt;&quot;</span>);</span><br><span class="line">            $(<span class="string">&quot;ol&quot;</span>).append(li);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="1-2-2-案例：发布微博案例"><a href="#1-2-2-案例：发布微博案例" class="headerlink" title="1.2.2. 案例：发布微博案例"></a>1.2.2. 案例：发布微博案例</h3><blockquote>
<p>1.点击发布按钮， 动态创建一个小li，放入文本框的内容和删除按钮， 并且添加到ul 中。<br>2.点击的删除按钮，可以删除当前的微博留言。</p>
</blockquote>
<p>​    代码实现略。(详情参考源代码)</p>
<h3 id="1-2-3-事件处理-off-解绑事件"><a href="#1-2-3-事件处理-off-解绑事件" class="headerlink" title="1.2.3. 事件处理 off() 解绑事件"></a>1.2.3. 事件处理 off() 解绑事件</h3><p>​    当某个事件上面的逻辑，在特定需求下不需要的时候，可以把该事件上的逻辑移除，这个过程我们称为事件解绑。jQuery 为我们提供 了多种事件解绑方法：die() / undelegate() / off() 等，甚至还有只触发一次的事件绑定方法 one()，在这里我们重点讲解一下 off() ;</p>
<p><strong>语法</strong></p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-3aPDi837-1606456063542)(images/off.png)]</p>
<p><strong>演示代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;p&gt;我是一个P标签&lt;/p&gt;</span><br><span class="line">	&lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  			<span class="comment">// 事件绑定</span></span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).on(&#123;</span><br><span class="line">                click: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;我点击了&quot;</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                mouseover: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;我鼠标经过了&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="string">&quot;ul&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;li&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="number">11</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 1. 事件解绑 off </span></span><br><span class="line">            <span class="comment">// $(&quot;div&quot;).off();  // 这个是解除了div身上的所有事件</span></span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).off(<span class="string">&quot;click&quot;</span>); <span class="comment">// 这个是解除了div身上的点击事件</span></span><br><span class="line">            $(<span class="string">&quot;ul&quot;</span>).off(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;li&quot;</span>);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 2. one() 但是它只能触发事件一次</span></span><br><span class="line">            $(<span class="string">&quot;p&quot;</span>).one(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="number">11</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="1-2-4-事件处理-trigger-自动触发事件"><a href="#1-2-4-事件处理-trigger-自动触发事件" class="headerlink" title="1.2.4. 事件处理 trigger() 自动触发事件"></a>1.2.4. 事件处理 trigger() 自动触发事件</h3><p>​    有些时候，在某些特定的条件下，我们希望某些事件能够自动触发, 比如轮播图自动播放功能跟点击右侧按钮一致。可以利用定时器自动触发右侧按钮点击事件，不必鼠标点击触发。由此 jQuery 为我们提供了两个自动触发事件 trigger() 和 triggerHandler() ; </p>
<p><strong>语法</strong></p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-9Kx61ehw-1606456063544)(images/t1.png)]</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-PWWckLvN-1606456063545)(images/t2.png)]</p>
<p><strong>演示代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 绑定事件</span></span><br><span class="line">      $(<span class="string">&quot;div&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">11</span>);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 自动触发事件</span></span><br><span class="line">      <span class="comment">// 1. 元素.事件()</span></span><br><span class="line">      <span class="comment">// $(&quot;div&quot;).click();会触发元素的默认行为</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 2. 元素.trigger(&quot;事件&quot;)</span></span><br><span class="line">      <span class="comment">// $(&quot;div&quot;).trigger(&quot;click&quot;);会触发元素的默认行为</span></span><br><span class="line">      $(<span class="string">&quot;input&quot;</span>).trigger(<span class="string">&quot;focus&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 3. 元素.triggerHandler(&quot;事件&quot;) 就是不会触发元素的默认行为</span></span><br><span class="line">      $(<span class="string">&quot;input&quot;</span>).on(<span class="string">&quot;focus&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="built_in">this</span>).val(<span class="string">&quot;你好吗&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 一个会获取焦点，一个不会</span></span><br><span class="line">      $(<span class="string">&quot;div&quot;</span>).triggerHandler(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">      <span class="comment">// $(&quot;input&quot;).triggerHandler(&quot;focus&quot;);</span></span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="1-3-jQuery-事件对象"><a href="#1-3-jQuery-事件对象" class="headerlink" title="1.3. jQuery 事件对象"></a>1.3. jQuery 事件对象</h2><p>​    jQuery 对DOM中的事件对象 event 进行了封装，兼容性更好，获取更方便，使用变化不大。事件被触发，就会有事件对象的产生。</p>
<p><strong>语法</strong></p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-DbU9qNS5-1606456063546)(images/event.png)]</p>
<p><strong>演示代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">	&lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="built_in">document</span>).on(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;点击了document&quot;</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// console.log(event);</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;点击了div&quot;</span>);</span><br><span class="line">                event.stopPropagation();</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p>注意：jQuery中的 event 对象使用，可以借鉴 API 和 DOM 中的 event 。</p>
<h2 id="1-4-jQuery-拷贝对象"><a href="#1-4-jQuery-拷贝对象" class="headerlink" title="1.4.  jQuery 拷贝对象"></a>1.4.  jQuery 拷贝对象</h2><p>​    jQuery中分别为我们提供了两套快速获取和设置元素尺寸和位置的API，方便易用，内容如下。</p>
<p><strong>语法</strong></p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-6yRG47pM-1606456063547)(images/extend.png)]</p>
<p><strong>演示代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  			<span class="comment">// 1.合并数据</span></span><br><span class="line">           <span class="keyword">var</span> targetObj = &#123;&#125;;</span><br><span class="line">           <span class="keyword">var</span> obj = &#123;</span><br><span class="line">               id: <span class="number">1</span>,</span><br><span class="line">               name: <span class="string">&quot;andy&quot;</span></span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="comment">// $.extend(target, obj);</span></span><br><span class="line">           $.extend(targetObj, obj);</span><br><span class="line">           <span class="built_in">console</span>.log(targetObj);</span><br><span class="line">  </span><br><span class="line">  			<span class="comment">// 2. 会覆盖 targetObj 里面原来的数据</span></span><br><span class="line">           <span class="keyword">var</span> targetObj = &#123;</span><br><span class="line">               id: <span class="number">0</span></span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="keyword">var</span> obj = &#123;</span><br><span class="line">               id: <span class="number">1</span>,</span><br><span class="line">               name: <span class="string">&quot;andy&quot;</span></span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="comment">// $.extend(target, obj);</span></span><br><span class="line">           $.extend(targetObj, obj);</span><br><span class="line">           <span class="built_in">console</span>.log(targetObj); </span><br><span class="line">       &#125;)</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="1-5-jQuery-多库共存"><a href="#1-5-jQuery-多库共存" class="headerlink" title="1.5.  jQuery 多库共存"></a>1.5.  jQuery 多库共存</h2><p>​    实际开发中，很多项目连续开发十多年，jQuery版本不断更新，最初的 jQuery 版本无法满足需求，这时就需要保证在旧有版本正常运行的情况下，新的功能使用新的jQuery版本实现，这种情况被称为，jQuery 多库共存。</p>
<p><strong>语法</strong></p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-mVXQEj6H-1606456063548)(images/noconfig.png)]</p>
<p><strong>演示代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  		<span class="comment">// 让jquery 释放对$ 控制权 让用自己决定</span></span><br><span class="line">  		<span class="keyword">var</span> suibian = jQuery.noConflict();</span><br><span class="line">  		<span class="built_in">console</span>.log(suibian(<span class="string">&quot;span&quot;</span>));</span><br><span class="line">	&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="1-6-jQuery-插件"><a href="#1-6-jQuery-插件" class="headerlink" title="1.6.  jQuery 插件"></a>1.6.  jQuery 插件</h2><p>​    jQuery 功能比较有限，想要更复杂的特效效果，可以借助于 jQuery 插件完成。 这些插件也是依赖于jQuery来完成的，所以必须要先引入</p>
<p>jQuery文件，因此也称为 jQuery 插件。</p>
<p>​    jQuery 插件常用的网站：</p>
<ol>
<li><p> jQuery 插件库  <a href="http://www.jq22.com/">http://www.jq22.com/</a>     </p>
</li>
<li><p>jQuery 之家   <a href="http://www.htmleaf.com/">http://www.htmleaf.com/</a> </p>
<p>jQuery 插件使用步骤：</p>
</li>
<li><p> 引入相关文件。（jQuery 文件 和 插件文件）    </p>
</li>
<li><p> 复制相关html、css、js (调用插件)。</p>
</li>
</ol>
<h3 id="1-4-1-瀑布流插件（重点讲解）"><a href="#1-4-1-瀑布流插件（重点讲解）" class="headerlink" title="1.4.1.  瀑布流插件（重点讲解）"></a>1.4.1.  瀑布流插件（重点讲解）</h3><p>​    我们学习的第一个插件是jQuery之家的开源插件，瀑布流。我们将重点详细讲解，从找到插件所在网页，然后点击下载代码，到插件的使用等，后面的插件使用可参考瀑布流插件的使用。</p>
<p><strong>下载位置</strong></p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-8VJp4nYj-1606456063549)(images/water.png)]</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-cnmpgHVa-1606456063550)(images/download.png)]</p>
<p><strong>代码演示</strong></p>
<p>​    插件的使用三点：   1. 引入css.           2.引入JS            3.引入html。 （有的简单插件只需引入html和js，甚至有的只需引入js）</p>
<ul>
<li>1.引入css.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;css/normalize.css&quot;</span>&gt;</span><br><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;css/default.css&quot;</span>&gt;</span><br><span class="line">  </span><br><span class="line">&lt;!-- 下面的样式代码为页面布局，可以引入，也可以自己写，自己设计页面样式，一般为直接引入，方便 --&gt;</span><br><span class="line">&lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">  #gallery-wrapper &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    max-width: <span class="number">75</span>%;</span><br><span class="line">    width: <span class="number">75</span>%;</span><br><span class="line">    margin: 50px auto;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  img.thumb &#123;</span><br><span class="line">    width: <span class="number">100</span>%;</span><br><span class="line">    max-width: <span class="number">100</span>%;</span><br><span class="line">    height: auto;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .white-panel &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    background: white;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    box-shadow: 0px 1px 2px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">    padding: 10px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .white-panel h1 &#123;</span><br><span class="line">    font-size: 1em;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .white-panel h1 a &#123;</span><br><span class="line">    color: #A92733;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .white-panel:hover &#123;</span><br><span class="line">    box-shadow: 1px 1px 10px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">    margin-top: -5px;</span><br><span class="line">    -webkit-transition: all <span class="number">0.</span>3s ease-<span class="keyword">in</span>-out;</span><br><span class="line">    -moz-transition: all <span class="number">0.</span>3s ease-<span class="keyword">in</span>-out;</span><br><span class="line">    -o-transition: all <span class="number">0.</span>3s ease-<span class="keyword">in</span>-out;</span><br><span class="line">    transition: all <span class="number">0.</span>3s ease-<span class="keyword">in</span>-out;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>2.引入js.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 前两个必须引入 --&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;js/jquery-1.11.0.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;js/pinterest_grid.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 下面的为启动瀑布流代码，参数可调节属性，具体功能可参考readme.html --&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $(<span class="string">&quot;#gallery-wrapper&quot;</span>).pinterest_grid(&#123;</span><br><span class="line">          no_columns: <span class="number">5</span>,</span><br><span class="line">          padding_x: <span class="number">15</span>,</span><br><span class="line">          padding_y: <span class="number">10</span>,</span><br><span class="line">          margin_bottom: <span class="number">50</span>,</span><br><span class="line">          single_column_breakpoint: <span class="number">700</span></span><br><span class="line">      &#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>3.引入html.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- html结构一般为事先写好，很难修改结构，但可以修改内容及图片的多少（article标签） --&gt;</span><br><span class="line">&lt;section id=<span class="string">&quot;gallery-wrapper&quot;</span>&gt;</span><br><span class="line">       &lt;article <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;white-panel&quot;</span>&gt;</span><br><span class="line">           &lt;img src=<span class="string">&quot;images/P_000.jpg&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;thumb&quot;</span>&gt;</span><br><span class="line">           &lt;h1&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是轮播图片1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/h1&gt;</span><br><span class="line">           &lt;p&gt;里面很精彩哦&lt;/p&gt;</span><br><span class="line">       &lt;/article&gt;</span><br><span class="line">       &lt;article <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;white-panel&quot;</span>&gt;</span><br><span class="line">           &lt;img src=<span class="string">&quot;images/P_005.jpg&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;thumb&quot;</span>&gt;</span><br><span class="line">           &lt;h1&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是轮播图片1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/h1&gt;</span><br><span class="line">           &lt;p&gt;里面很精彩哦&lt;/p&gt;</span><br><span class="line">       &lt;/article&gt;</span><br><span class="line">       &lt;article <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;white-panel&quot;</span>&gt;</span><br><span class="line">           &lt;img src=<span class="string">&quot;images/P_006.jpg&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;thumb&quot;</span>&gt;</span><br><span class="line">           &lt;h1&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是轮播图片1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/h1&gt;</span><br><span class="line">           &lt;p&gt;里面很精彩哦&lt;/p&gt;</span><br><span class="line">       &lt;/article&gt;</span><br><span class="line">       &lt;article <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;white-panel&quot;</span>&gt;</span><br><span class="line">           &lt;img src=<span class="string">&quot;images/P_007.jpg&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;thumb&quot;</span>&gt;</span><br><span class="line">           &lt;h1&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是轮播图片1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/h1&gt;</span><br><span class="line">           &lt;p&gt;里面很精彩哦&lt;/p&gt;</span><br><span class="line">       &lt;/article&gt;</span><br><span class="line">   &lt;/section&gt;</span><br></pre></td></tr></table></figure>
<p>总结：jQuery插件就是引入别人写好的：html 、css、js  （有时也可以只引入一部分，读懂后也可以修改部分内容）</p>
<h3 id="1-4-2-图片懒加载插件"><a href="#1-4-2-图片懒加载插件" class="headerlink" title="1.4.2. 图片懒加载插件"></a>1.4.2. 图片懒加载插件</h3><p>​    图片的懒加载就是：当页面滑动到有图片的位置，图片才进行加载，用以提升页面打开的速度及用户体验。（下载略）</p>
<p><strong>代码演示</strong></p>
<p>​    懒加载只需引入html 和 js操作 即可，此插件不涉及css。</p>
<ul>
<li>1.引入js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;js/EasyLazyload.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">   	lazyLoadInit(&#123;</span><br><span class="line">   		showTime: <span class="number">1100</span>,</span><br><span class="line">   		onLoadBackEnd: <span class="function"><span class="keyword">function</span>(<span class="params">i, e</span>) </span>&#123;</span><br><span class="line">     		<span class="built_in">console</span>.log(<span class="string">&quot;onLoadBackEnd:&quot;</span> + i);</span><br><span class="line">   		&#125;,</span><br><span class="line">   		onLoadBackStart: <span class="function"><span class="keyword">function</span>(<span class="params">i, e</span>) </span>&#123;</span><br><span class="line">     		<span class="built_in">console</span>.log(<span class="string">&quot;onLoadBackStart:&quot;</span> + i);</span><br><span class="line">   		&#125;</span><br><span class="line"> 	&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>2.引入html</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;img data-lazy-src=<span class="string">&quot;upload/floor-1-3.png&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="1-4-3-全屏滚动插件"><a href="#1-4-3-全屏滚动插件" class="headerlink" title="1.4.3. 全屏滚动插件"></a>1.4.3. 全屏滚动插件</h3><p>​    全屏滚动插件比较大，所以，一般大型插件都会有帮助文档，或者网站。全屏滚动插件介绍比较详细的网站为：</p>
<p><a href="http://www.dowebok.com/demo/2014/77/">http://www.dowebok.com/demo/2014/77/</a></p>
<p><strong>代码演示</strong></p>
<p>​    全屏滚动因为有多重形式，所以不一样的风格html和css也不一样，但是 js 变化不大。所以下面只演示js的引入，html和css引入根据自己实际</p>
<p>项目需要使用哪种风格引入对应的HTML和CSS。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;js/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;js/fullpage.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  		$(<span class="string">&#x27;#dowebok&#x27;</span>).fullpage(&#123;</span><br><span class="line">    		sectionsColor: [<span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;#4BBFC3&#x27;</span>, <span class="string">&#x27;#7BAABE&#x27;</span>, <span class="string">&#x27;#f90&#x27;</span>],</span><br><span class="line">    		navigation: <span class="literal">true</span></span><br><span class="line">  		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>注意：实际开发，一般复制文件，然后在文件中进行修改和添加功能。</p>
<h3 id="1-4-4-bootstrap组件"><a href="#1-4-4-bootstrap组件" class="headerlink" title="1.4.4. bootstrap组件"></a>1.4.4. bootstrap组件</h3><p>​    Bootstrap是 Twitter 公司设计的基于HTML、CSS、JavaScript开发的简洁、直观、强悍的前端开发框架，他依靠jQuery实现，且支持响应式</p>
<p>布局，使得 Web 开发更加方便快捷。</p>
<p>​    <strong>凡是在软件开发中用到了软件的复用，被复用的部分都可以称为组件，凡是在应用程序中已经预留接口的组件就是插件</strong>。Bootstrap组件使</p>
<p>用非常方便:  1.引入bootstrap相关css和js        2.去官网复制html</p>
<p><strong>代码演示</strong></p>
<ol>
<li>引入bootstrap相关css和js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;bootstrap/css/bootstrap.min.css&quot;</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;bootstrap/js/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;bootstrap/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>去官网复制html的功能模块</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">       &lt;!-- Single button --&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span><br><span class="line">           &lt;button type=<span class="string">&quot;button&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn btn-default dropdown-toggle&quot;</span> data-toggle=<span class="string">&quot;dropdown&quot;</span> aria-haspopup=<span class="string">&quot;true&quot;</span> aria-expanded=<span class="string">&quot;false&quot;</span>&gt;</span><br><span class="line">     		Action &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;caret&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">   		&lt;/button&gt;</span><br><span class="line">           &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span><br><span class="line">               &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">               &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">               &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">               &lt;li role=<span class="string">&quot;separator&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;divider&quot;</span>&gt;&lt;/li&gt;</span><br><span class="line">               &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">           &lt;/ul&gt;</span><br><span class="line">    	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h3 id="1-4-5-bootstrap插件（JS）"><a href="#1-4-5-bootstrap插件（JS）" class="headerlink" title="1.4.5. bootstrap插件（JS）"></a>1.4.5. bootstrap插件（JS）</h3><p>​    bootstrap中的js插件其实也是组件的一部分，只不过是需要js调用功能的组件，所以一般bootstrap的js插件一般会伴随着js代码（有的也可以</p>
<p>省略js，用属性实现）。</p>
<p>​    步骤： 1.引入bootstrap相关css和js        2.去官网复制html        3.复制js代码，启动js插件。</p>
<p><strong>代码演示</strong></p>
<ol>
<li>引入bootstrap相关css和js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;bootstrap/css/bootstrap.min.css&quot;</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;bootstrap/js/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;bootstrap/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>去官网复制html的功能模块</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 模态框 --&gt;</span><br><span class="line">&lt;!-- Large modal --&gt;</span><br><span class="line">&lt;button type=<span class="string">&quot;button&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn btn-primary&quot;</span> data-toggle=<span class="string">&quot;modal&quot;</span> data-target=<span class="string">&quot;.bs-example-modal-lg&quot;</span>&gt;Large modal&lt;/button&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;modal fade bs-example-modal-lg&quot;</span> tabindex=<span class="string">&quot;-1&quot;</span> role=<span class="string">&quot;dialog&quot;</span> aria-labelledby=<span class="string">&quot;myLargeModalLabel&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;modal-dialog modal-lg&quot;</span> role=<span class="string">&quot;document&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span><br><span class="line">            里面就是模态框</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>复制js代码，启动js插件。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="comment">// 当我们点击了自己定义的按钮，就弹出模态框</span></span><br><span class="line">	$(<span class="string">&quot;.myBtn&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="comment">// alert(11);</span></span><br><span class="line">		$(<span class="string">&#x27;#btn&#x27;</span>).modal()</span><br><span class="line">	&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="1-4-6-bootstrap案例-阿里百秀"><a href="#1-4-6-bootstrap案例-阿里百秀" class="headerlink" title="1.4.6. bootstrap案例-阿里百秀"></a>1.4.6. bootstrap案例-阿里百秀</h3><blockquote>
<p>1.通过调用组件实现导航栏<br>2.通过调用插件实现登录<br>3.通过调用插件标签页实现 tab 栏</p>
</blockquote>
<p>​    代码实现略。(详情参考源代码)</p>
<h2 id="1-7-综合案例-toDoList案例分析（代码略）"><a href="#1-7-综合案例-toDoList案例分析（代码略）" class="headerlink" title="1.7. 综合案例: toDoList案例分析（代码略）"></a>1.7. 综合案例: toDoList案例分析（代码略）</h2><h3 id="1-7-1-案例：案例介绍"><a href="#1-7-1-案例：案例介绍" class="headerlink" title="1.7.1 案例：案例介绍"></a>1.7.1 案例：案例介绍</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 文本框里面输入内容，按下回车，就可以生成待办事项。</span></span><br><span class="line"><span class="comment">// 2. 点击待办事项复选框，就可以把当前数据添加到已完成事项里面。</span></span><br><span class="line"><span class="comment">// 3. 点击已完成事项复选框，就可以把当前数据添加到待办事项里面。</span></span><br><span class="line"><span class="comment">// 4. 但是本页面内容刷新页面不会丢失。</span></span><br></pre></td></tr></table></figure>
<h3 id="1-7-2-案例：toDoList-分析"><a href="#1-7-2-案例：toDoList-分析" class="headerlink" title="1.7.2 案例：toDoList 分析"></a>1.7.2 案例：toDoList 分析</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 刷新页面不会丢失数据，因此需要用到本地存储 localStorage</span></span><br><span class="line"><span class="comment">// 2. 核心思路： 不管按下回车，还是点击复选框，都是把本地存储的数据加载到页面中，这样保证刷新关闭页面不会丢失数据</span></span><br><span class="line"><span class="comment">// 3. 存储的数据格式：var todolist =  [&#123; title : ‘xxx’, done: false&#125;]</span></span><br><span class="line"><span class="comment">// 4. 注意点1： 本地存储 localStorage 里面只能存储字符串格式 ，因此需要把对象转换为字符串 JSON.stringify(data)。</span></span><br><span class="line"><span class="comment">// 5. 注意点2： 获取本地存储数据，需要把里面的字符串转换为对象格式JSON.parse() 我们才能使用里面的数据。</span></span><br></pre></td></tr></table></figure>
<h3 id="1-7-3-案例：toDoList-按下回车把新数据添加到本地存储里面"><a href="#1-7-3-案例：toDoList-按下回车把新数据添加到本地存储里面" class="headerlink" title="1.7.3 案例：toDoList 按下回车把新数据添加到本地存储里面"></a>1.7.3 案例：toDoList 按下回车把新数据添加到本地存储里面</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.切记： 页面中的数据，都要从本地存储里面获取，这样刷新页面不会丢失数据，所以先要把数据保存到本地存储里面。</span></span><br><span class="line"><span class="comment">// 2.利用事件对象.keyCode判断用户按下回车键（13）。</span></span><br><span class="line"><span class="comment">// 3.声明一个数组，保存数据。</span></span><br><span class="line"><span class="comment">// 4.先要读取本地存储原来的数据（声明函数 getData()），放到这个数组里面。</span></span><br><span class="line"><span class="comment">// 5.之后把最新从表单获取过来的数据，追加到数组里面。</span></span><br><span class="line"><span class="comment">// 6.最后把数组存储给本地存储 (声明函数 savaDate())</span></span><br></pre></td></tr></table></figure>
<h3 id="1-7-4-案例：toDoList-本地存储数据渲染加载到页面"><a href="#1-7-4-案例：toDoList-本地存储数据渲染加载到页面" class="headerlink" title="1.7.4 案例：toDoList 本地存储数据渲染加载到页面"></a>1.7.4 案例：toDoList 本地存储数据渲染加载到页面</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.因为后面也会经常渲染加载操作，所以声明一个函数 load，方便后面调用</span></span><br><span class="line"><span class="comment">// 2.先要读取本地存储数据。（数据不要忘记转换为对象格式）</span></span><br><span class="line"><span class="comment">// 3.之后遍历这个数据（$.each()），有几条数据，就生成几个小li 添加到 ol 里面。</span></span><br><span class="line"><span class="comment">// 4.每次渲染之前，先把原先里面 ol 的内容清空，然后渲染加载最新的数据。</span></span><br></pre></td></tr></table></figure>
<h3 id="1-7-5-案例：toDoList-删除操作"><a href="#1-7-5-案例：toDoList-删除操作" class="headerlink" title="1.7.5 案例：toDoList 删除操作"></a>1.7.5 案例：toDoList 删除操作</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.点击里面的a链接，不是删除的li，而是删除本地存储对应的数据。</span></span><br><span class="line"><span class="comment">// 2.核心原理：先获取本地存储数据，删除对应的数据，保存给本地存储，重新渲染列表li</span></span><br><span class="line"><span class="comment">// 3.我们可以给链接自定义属性记录当前的索引号</span></span><br><span class="line"><span class="comment">// 4.根据这个索引号删除相关的数据----数组的splice(i, 1)方法</span></span><br><span class="line"><span class="comment">// 5.存储修改后的数据，然后存储给本地存储</span></span><br><span class="line"><span class="comment">// 6.重新渲染加载数据列表</span></span><br><span class="line"><span class="comment">// 7.因为a是动态创建的，我们使用on方法绑定事件</span></span><br></pre></td></tr></table></figure>
<h3 id="1-7-6-案例：toDoList-正在进行和已完成选项操作"><a href="#1-7-6-案例：toDoList-正在进行和已完成选项操作" class="headerlink" title="1.7.6 案例：toDoList  正在进行和已完成选项操作"></a>1.7.6 案例：toDoList  正在进行和已完成选项操作</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.当我们点击了小的复选框，修改本地存储数据，再重新渲染数据列表。</span></span><br><span class="line"><span class="comment">// 2.点击之后，获取本地存储数据。</span></span><br><span class="line"><span class="comment">// 3.修改对应数据属性 done 为当前复选框的checked状态。</span></span><br><span class="line"><span class="comment">// 4.之后保存数据到本地存储</span></span><br><span class="line"><span class="comment">// 5.重新渲染加载数据列表</span></span><br><span class="line"><span class="comment">// 6.load 加载函数里面，新增一个条件,如果当前数据的done为true 就是已经完成的，就把列表渲染加载到 ul 里面</span></span><br><span class="line"><span class="comment">// 7.如果当前数据的done 为false， 则是待办事项，就把列表渲染加载到 ol 里面</span></span><br></pre></td></tr></table></figure>
<h3 id="1-7-7-案例：toDoList-统计正在进行个数和已经完成个数"><a href="#1-7-7-案例：toDoList-统计正在进行个数和已经完成个数" class="headerlink" title="1.7.7 案例：toDoList 统计正在进行个数和已经完成个数"></a>1.7.7 案例：toDoList 统计正在进行个数和已经完成个数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.在我们load 函数里面操作</span></span><br><span class="line"><span class="comment">// 2.声明2个变量 ：todoCount 待办个数  doneCount 已完成个数   </span></span><br><span class="line"><span class="comment">// 3.当进行遍历本地存储数据的时候， 如果 数据done为 false， 则 todoCount++, 否则 doneCount++</span></span><br><span class="line"><span class="comment">// 4.最后修改相应的元素 text() </span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>Jquery</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
</search>
